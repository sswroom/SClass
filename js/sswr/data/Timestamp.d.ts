declare class Timestamp {
	constructor(inst: TimeInstant, tzQhr: number);
	static fromTicks(ticks: number, tzQhr: number): Timestamp;
	static fromStr(str: string, defTzQhr: number): Timestamp;
	static now(): Timestamp;
	static utcNow(): Timestamp;
	static fromVariTime(variTime: any): Timestamp;
	static fromSecNS(unixTS: number, nanosec: number, tzQhr: number): Timestamp;
	static fromDotNetTicks(ticks: number, tzQhr: number): Timestamp;
	static fromEpochSec(epochSec: number, tzQhr: number): Timestamp;
	static fromEpochMS(epochMS: number, tzQhr: number): Timestamp;
	static fromEpochUS(epochUS: number, tzQhr: number): Timestamp;
	static fromEpochNS(epochNS: number, tzQhr: number): Timestamp;
	static fromTimeValue(tval: any): Timestamp;
	static fromYMDHMS(ymdhms: number, tzQhr: number): Timestamp;
	addMonth(val: number): Timestamp;
	addYear(val: number): Timestamp;
	addDay(val: number): Timestamp;
	addHour(val: number): Timestamp;
	addMinute(val: number): Timestamp;
	addSecond(val: number): Timestamp;
	addMS(val: number): Timestamp;
	addNS(val: number): Timestamp;
	getMS(): number;
	clearTimeUTC(): Timestamp;
	clearTimeLocal(): Timestamp;
	clearMonthAndDay(): Timestamp;
	clearDayOfMonth(): Timestamp;
	getMSPassedUTCDate(): number;
	getMSPassedLocalDate(): number;
	diffSec(ts: Timestamp): number;
	diffMS(ts: Timestamp): number;
	diffSecDbl(ts: Timestamp): number;
	diff(ts: Timestamp): number;
	toTicks(): number;
	toDotNetTicks(): number;
	toUnixTimestamp(): number;
	toEpochSec(): number;
	toEpochMS(): number;
	toEpochNS(): number;
	toString(pattern: string | null): string;
	toStringISO8601(): string;
	toStringNoZone(): string;
	toUTCTime(): Timestamp;
	toLocalTime(): Timestamp;
	convertTimeZoneQHR(tzQhr: number): Timestamp;
	setTimeZoneQHR(tzQhr: number): Timestamp;
	getTimeZoneQHR(): number;
	sameDate(ts: Timestamp): boolean;
	toTimeValue(): any;
	roundToS(): Timestamp;
}