#include "Stdafx.h"
#include "IO/WindowsError.h"

//#include <winerror.h>
//#include <ntstatus.h>
//
//  Values are 32 bit values laid out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//

Text::CStringNN IO::WindowsError::GetString(UInt32 errorCode)
{
	switch (errorCode)
	{
	case 0x00000000:
		return CSTR("S_OK");
	case 0x00000001:
		return CSTR("ERROR_INVALID_FUNCTION");
	case 0x00000002:
		return CSTR("ERROR_FILE_NOT_FOUND");
	case 0x00000003:
		return CSTR("ERROR_PATH_NOT_FOUND");
	case 0x00000004:
		return CSTR("ERROR_TOO_MANY_OPEN_FILES");
	case 0x00000006:
		return CSTR("ERROR_INVALID_HANDLE");
	case 0x00000007:
		return CSTR("ERROR_ARENA_TRASHED");
	case 0x00000008:
		return CSTR("ERROR_NOT_ENOUGH_MEMORY");
	case 0x00000009:
		return CSTR("ERROR_INVALID_BLOCK");
	case 0x0000000A:
		return CSTR("ERROR_BAD_ENVIRONMENT");
	case 0x0000000B:
		return CSTR("ERROR_BAD_FORMAT");
	case 0x0000000C:
		return CSTR("ERROR_INVALID_ACCESS");
	case 0x0000000D:
		return CSTR("ERROR_INVALID_DATA");
	case 0x0000000E:
		return CSTR("ERROR_OUTOFMEMORY");
	case 0x0000000F:
		return CSTR("ERROR_INVALID_DRIVE");
	case 0x00000010:
		return CSTR("ERROR_CURRENT_DIRECTORY");
	case 0x00000011:
		return CSTR("ERROR_NOT_SAME_DEVICE");
	case 0x00000012:
		return CSTR("ERROR_NO_MORE_FILES");
	case 0x00000013:
		return CSTR("ERROR_WRITE_PROTECT");
	case 0x00000014:
		return CSTR("ERROR_BAD_UNIT");
	case 0x00000015:
		return CSTR("ERROR_NOT_READY");
	case 0x00000016:
		return CSTR("ERROR_BAD_COMMAND");
	case 0x00000050:
		return CSTR("ERROR_FILE_EXISTS");
	case 0x00000052:
		return CSTR("ERROR_CANNOT_MAKE");
	case 0x00000053:
		return CSTR("ERROR_FAIL_I24");
	case 0x00000054:
		return CSTR("ERROR_OUT_OF_STRUCTURES");
	case 0x00000055:
		return CSTR("ERROR_ALREADY_ASSIGNED");
	case 0x00000056:
		return CSTR("ERROR_INVALID_PASSWORD");
	case 0x00000057:
		return CSTR("ERROR_INVALID_PARAMETER");
	case 0x00002EE0:
		return CSTR("WINHTTP_ERROR_BASE");
	case 0x00002EE1:
		return CSTR("ERROR_WINHTTP_OUT_OF_HANDLES");
	case 0x00002EE2:
		return CSTR("ERROR_WINHTTP_TIMEOUT");
	case 0x00002EE4:
		return CSTR("ERROR_WINHTTP_INTERNAL_ERROR");
	case 0x00002EE5:
		return CSTR("ERROR_WINHTTP_INVALID_URL");
	case 0x00002EE6:
		return CSTR("ERROR_WINHTTP_UNRECOGNIZED_SCHEME");
	case 0x00002EE7:
		return CSTR("ERROR_WINHTTP_NAME_NOT_RESOLVED");
	case 0x00002EE9:
		return CSTR("ERROR_WINHTTP_INVALID_OPTION");
	case 0x00002EEB:
		return CSTR("ERROR_WINHTTP_OPTION_NOT_SETTABLE");
	case 0x00002EEC:
		return CSTR("ERROR_WINHTTP_SHUTDOWN");
	case 0x00002EEF:
		return CSTR("ERROR_WINHTTP_LOGIN_FAILURE");
	case 0x00002EF1:
		return CSTR("ERROR_WINHTTP_OPERATION_CANCELLED");
	case 0x00002EF2:
		return CSTR("ERROR_WINHTTP_INCORRECT_HANDLE_TYPE");
	case 0x00002EF3:
		return CSTR("ERROR_WINHTTP_INCORRECT_HANDLE_STATE");
	case 0x00002EFD:
		return CSTR("ERROR_WINHTTP_CANNOT_CONNECT");
	case 0x00002EFE:
		return CSTR("ERROR_WINHTTP_CONNECTION_ERROR");
	case 0x00002F00:
		return CSTR("ERROR_WINHTTP_RESEND_REQUEST");
	case 0x00002F0C:
		return CSTR("ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED");
	case 0x00002F44:
		return CSTR("ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN");
	case 0x00002F45:
		return CSTR("ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND");
	case 0x00002F46:
		return CSTR("ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND");
	case 0x00002F47:
		return CSTR("ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN");
	case 0x00090312:
		return CSTR("SEC_I_CONTINUE_NEEDED");
	case 0x00090313:
		return CSTR("SEC_I_COMPLETE_NEEDED");
	case 0x00090314:
		return CSTR("SEC_I_COMPLETE_AND_CONTINUE");
	case 0x00090315:
		return CSTR("SEC_I_LOCAL_LOGON");
	case 0x00090316:
		return CSTR("SEC_I_GENERIC_EXTENSION_RECEIVED");
	case 0x00090317:
		return CSTR("SEC_I_CONTEXT_EXPIRED");
	case 0x00090320:
		return CSTR("SEC_I_INCOMPLETE_CREDENTIALS");
	case 0x00090321:
		return CSTR("SEC_I_RENEGOTIATE");
	case 0x00090323:
		return CSTR("SEC_I_NO_LSA_CONTEXT");
	case 0x0009035C:
		return CSTR("SEC_I_SIGNATURE_NEEDED");
	case 0x00090360:
		return CSTR("SEC_I_NO_RENEGOTIATION");
	case 0x00090364:
		return CSTR("SEC_I_MESSAGE_FRAGMENT");
	case 0x00090366:
		return CSTR("SEC_I_CONTINUE_NEEDED_MESSAGE_OK");
	case 0x00090368:
		return CSTR("SEC_I_ASYNC_CALL_PENDING");
	case 0x8000000A:
		return CSTR("E_PENDING");
	case 0x80004001:
		return CSTR("E_NOTIMPL");
	case 0x80004002:
		return CSTR("E_NOINTERFACE");
	case 0x80004003:
		return CSTR("E_POINTER");
	case 0x80004004:
		return CSTR("E_ABORT");
	case 0x80004005:
		return CSTR("E_FAIL");
	case 0x80004006:
		return CSTR("CO_E_INIT_TLS");
	case 0x80004007:
		return CSTR("CO_E_INIT_SHARED_ALLOCATOR");
	case 0x80004008:
		return CSTR("CO_E_INIT_MEMORY_ALLOCATOR");
	case 0x80004009:
		return CSTR("CO_E_INIT_CLASS_CACHE");
	case 0x8000400A:
		return CSTR("CO_E_INIT_RPC_CHANNEL");
	case 0x8000400B:
		return CSTR("CO_E_INIT_TLS_SET_CHANNEL_CONTROL");
	case 0x8000400C:
		return CSTR("CO_E_INIT_TLS_CHANNEL_CONTROL");
	case 0x8000400D:
		return CSTR("CO_E_INIT_UNACCEPTED_USER_ALLOCATOR");
	case 0x8000400E:
		return CSTR("CO_E_INIT_SCM_MUTEX_EXISTS");
	case 0x8000400F:
		return CSTR("CO_E_INIT_SCM_FILE_MAPPING_EXISTS");
	case 0x80004010:
		return CSTR("CO_E_INIT_SCM_MAP_VIEW_OF_FILE");
	case 0x80004011:
		return CSTR("CO_E_INIT_SCM_EXEC_FAILURE");
	case 0x80004012:
		return CSTR("CO_E_INIT_ONLY_SINGLE_THREADED");
	case 0x80004013:
		return CSTR("CO_E_CANT_REMOTE");
	case 0x80004014:
		return CSTR("CO_E_BAD_SERVER_NAME");
	case 0x80004015:
		return CSTR("CO_E_WRONG_SERVER_IDENTITY");
	case 0x80004016:
		return CSTR("CO_E_OLE1DDE_DISABLED");
	case 0x80004017:
		return CSTR("CO_E_RUNAS_SYNTAX");
	case 0x80004018:
		return CSTR("CO_E_CREATEPROCESS_FAILURE");
	case 0x80004019:
		return CSTR("CO_E_RUNAS_CREATEPROCESS_FAILURE");
	case 0x8000401A:
		return CSTR("CO_E_RUNAS_LOGON_FAILURE");
	case 0x8000401B:
		return CSTR("CO_E_LAUNCH_PERMSSION_DENIED");
	case 0x8000401C:
		return CSTR("CO_E_START_SERVICE_FAILURE");
	case 0x8000401D:
		return CSTR("CO_E_REMOTE_COMMUNICATION_FAILURE");
	case 0x8000401E:
		return CSTR("CO_E_SERVER_START_TIMEOUT");
	case 0x8000401F:
		return CSTR("CO_E_CLSREG_INCONSISTENT");
	case 0x80004020:
		return CSTR("CO_E_IIDREG_INCONSISTENT");
	case 0x80004021:
		return CSTR("CO_E_NOT_SUPPORTED");
	case 0x80004022:
		return CSTR("CO_E_RELOAD_DLL");
	case 0x80004023:
		return CSTR("CO_E_MSI_ERROR");
	case 0x80004024:
		return CSTR("CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT");
	case 0x80004025:
		return CSTR("CO_E_SERVER_PAUSED");
	case 0x80004026:
		return CSTR("CO_E_SERVER_NOT_PAUSED");
	case 0x80004027:
		return CSTR("CO_E_CLASS_DISABLED");
	case 0x80004028:
		return CSTR("CO_E_CLRNOTAVAILABLE");
	case 0x80004029:
		return CSTR("CO_E_ASYNC_WORK_REJECTED");
	case 0x8000402A:
		return CSTR("CO_E_SERVER_INIT_TIMEOUT");
	case 0x8000402B:
		return CSTR("CO_E_NO_SECCTX_IN_ACTIVATE");
	case 0x80004030:
		return CSTR("CO_E_TRACKER_CONFIG");
	case 0x80004031:
		return CSTR("CO_E_THREADPOOL_CONFIG");
	case 0x80004032:
		return CSTR("CO_E_SXS_CONFIG");
	case 0x80004033:
		return CSTR("CO_E_MALFORMED_SPN");
	case 0x8000FFFF:
		return CSTR("E_UNEXPECTED");
	case 0x80040000:
		return CSTR("OLE_E_OLEVERB");
	case 0x80040001:
		return CSTR("OLE_E_ADVF");
	case 0x80040002:
		return CSTR("OLE_E_ENUM_NOMORE");
	case 0x80040003:
		return CSTR("OLE_E_ADVISENOTSUPPORTED");
	case 0x80040004:
		return CSTR("OLE_E_NOCONNECTION");
	case 0x80040005:
		return CSTR("OLE_E_NOTRUNNING");
	case 0x80040006:
		return CSTR("OLE_E_NOCACHE");
	case 0x80040007:
		return CSTR("OLE_E_BLANK");
	case 0x80040008:
		return CSTR("OLE_E_CLASSDIFF");
	case 0x80040009:
		return CSTR("OLE_E_CANT_GETMONIKER");
	case 0x8004000A:
		return CSTR("OLE_E_CANT_BINDTOSOURCE");
	case 0x8004000B:
		return CSTR("OLE_E_STATIC");
	case 0x8004000C:
		return CSTR("OLE_E_PROMPTSAVECANCELLED");
	case 0x8004000D:
		return CSTR("OLE_E_INVALIDRECT");
	case 0x8004000E:
		return CSTR("OLE_E_WRONGCOMPOBJ");
	case 0x8004000F:
		return CSTR("OLE_E_INVALIDHWND");
	case 0x80040010:
		return CSTR("OLE_E_NOT_INPLACEACTIVE");
	case 0x80040011:
		return CSTR("OLE_E_CANTCONVERT");
	case 0x80040012:
		return CSTR("OLE_E_NOSTORAGE");
	case 0x80040064:
		return CSTR("DV_E_FORMATETC");
	case 0x80040065:
		return CSTR("DV_E_DVTARGETDEVICE");
	case 0x80040066:
		return CSTR("DV_E_STGMEDIUM");
	case 0x80040067:
		return CSTR("DV_E_STATDATA");
	case 0x80040068:
		return CSTR("DV_E_LINDEX");
	case 0x80040069:
		return CSTR("DV_E_TYMED");
	case 0x8004006A:
		return CSTR("DV_E_CLIPFORMAT");
	case 0x8004006B:
		return CSTR("DV_E_DVASPECT");
	case 0x8004006C:
		return CSTR("DV_E_DVTARGETDEVICE_SIZE");
	case 0x8004006D:
		return CSTR("DV_E_NOIVIEWOBJECT");
	case 0x80040100:
		return CSTR("DRAGDROP_E_NOTREGISTERED");
	case 0x80040101:
		return CSTR("DRAGDROP_E_ALREADYREGISTERED");
	case 0x80040102:
		return CSTR("DRAGDROP_E_INVALIDHWND");
	case 0x80040110:
		return CSTR("CLASS_E_NOAGGREGATION");
	case 0x80040111:
		return CSTR("CLASS_E_CLASSNOTAVAILABLE");
	case 0x80040112:
		return CSTR("CLASS_E_NOTLICENSED");
	case 0x80040150:
		return CSTR("REGDB_E_READREGDB");
	case 0x80040151:
		return CSTR("REGDB_E_WRITEREGDB");
	case 0x80040152:
		return CSTR("REGDB_E_KEYMISSING");
	case 0x80040153:
		return CSTR("REGDB_E_INVALIDVALUE");
	case 0x80040154:
		return CSTR("REGDB_E_CLASSNOTREG");
	case 0x80040155:
		return CSTR("REGDB_E_IIDNOTREG");
	case 0x80040156:
		return CSTR("REGDB_E_BADTHREADINGMODEL");
	case 0x80040160:
		return CSTR("CAT_E_CATIDNOEXIST");
	case 0x80040161:
		return CSTR("CAT_E_NODESCRIPTION");
	case 0x80040164:
		return CSTR("CS_E_PACKAGE_NOTFOUND");
	case 0x80040165:
		return CSTR("CS_E_NOT_DELETABLE");
	case 0x80040166:
		return CSTR("CS_E_CLASS_NOTFOUND");
	case 0x80040167:
		return CSTR("CS_E_INVALID_VERSION");
	case 0x80040168:
		return CSTR("CS_E_NO_CLASSSTORE");
	case 0x80040169:
		return CSTR("CS_E_OBJECT_NOTFOUND");
	case 0x8004016A:
		return CSTR("CS_E_OBJECT_ALREADY_EXISTS");
	case 0x8004016B:
		return CSTR("CS_E_INVALID_PATH");
	case 0x8004016C:
		return CSTR("CS_E_NETWORK_ERROR");
	case 0x8004016D:
		return CSTR("CS_E_ADMIN_LIMIT_EXCEEDED");
	case 0x8004016E:
		return CSTR("CS_E_SCHEMA_MISMATCH");
	case 0x8004016F:
		return CSTR("CS_E_INTERNAL_ERROR");
	case 0x80040170:
		return CSTR("CACHE_E_NOCACHE_UPDATED");
	case 0x80040180:
		return CSTR("OLEOBJ_E_NOVERBS");
	case 0x80040181:
		return CSTR("OLEOBJ_E_INVALIDVERB");
	case 0x800401A0:
		return CSTR("INPLACE_E_NOTUNDOABLE");
	case 0x800401A1:
		return CSTR("INPLACE_E_NOTOOLSPACE");
	case 0x800401C0:
		return CSTR("CONVERT10_E_OLESTREAM_GET");
	case 0x800401C1:
		return CSTR("CONVERT10_E_OLESTREAM_PUT");
	case 0x800401C2:
		return CSTR("CONVERT10_E_OLESTREAM_FMT");
	case 0x800401C3:
		return CSTR("CONVERT10_E_OLESTREAM_BITMAP_TO_DIB");
	case 0x800401C4:
		return CSTR("CONVERT10_E_STG_FMT");
	case 0x800401C5:
		return CSTR("CONVERT10_E_STG_NO_STD_STREAM");
	case 0x800401C6:
		return CSTR("CONVERT10_E_STG_DIB_TO_BITMAP");
	case 0x800401D0:
		return CSTR("CLIPBRD_E_CANT_OPEN");
	case 0x800401D1:
		return CSTR("CLIPBRD_E_CANT_EMPTY");
	case 0x800401D2:
		return CSTR("CLIPBRD_E_CANT_SET");
	case 0x800401D3:
		return CSTR("CLIPBRD_E_BAD_DATA");
	case 0x800401D4:
		return CSTR("CLIPBRD_E_CANT_CLOSE");
	case 0x800401E0:
		return CSTR("MK_E_CONNECTMANUALLY");
	case 0x800401E1:
		return CSTR("MK_E_EXCEEDEDDEADLINE");
	case 0x800401E2:
		return CSTR("MK_E_NEEDGENERIC");
	case 0x800401E3:
		return CSTR("MK_E_UNAVAILABLE");
	case 0x800401E4:
		return CSTR("MK_E_SYNTAX");
	case 0x800401E5:
		return CSTR("MK_E_NOOBJECT");
	case 0x800401E6:
		return CSTR("MK_E_INVALIDEXTENSION");
	case 0x800401E7:
		return CSTR("MK_E_INTERMEDIATEINTERFACENOTSUPPORTED");
	case 0x800401E8:
		return CSTR("MK_E_NOTBINDABLE");
	case 0x800401E9:
		return CSTR("MK_E_NOTBOUND");
	case 0x800401EA:
		return CSTR("MK_E_CANTOPENFILE");
	case 0x800401EB:
		return CSTR("MK_E_MUSTBOTHERUSER");
	case 0x800401EC:
		return CSTR("MK_E_NOINVERSE");
	case 0x800401ED:
		return CSTR("MK_E_NOSTORAGE");
	case 0x800401EE:
		return CSTR("MK_E_NOPREFIX");
	case 0x800401EF:
		return CSTR("MK_E_ENUMERATION_FAILED");
	case 0x800401F0:
		return CSTR("CO_E_NOTINITIALIZED");
	case 0x800401F1:
		return CSTR("CO_E_ALREADYINITIALIZED");
	case 0x800401F2:
		return CSTR("CO_E_CANTDETERMINECLASS");
	case 0x800401F3:
		return CSTR("CO_E_CLASSSTRING");
	case 0x800401F4:
		return CSTR("CO_E_IIDSTRING");
	case 0x800401F5:
		return CSTR("CO_E_APPNOTFOUND");
	case 0x800401F6:
		return CSTR("CO_E_APPSINGLEUSE");
	case 0x800401F7:
		return CSTR("CO_E_ERRORINAPP");
	case 0x800401F8:
		return CSTR("CO_E_DLLNOTFOUND");
	case 0x800401F9:
		return CSTR("CO_E_ERRORINDLL");
	case 0x800401FA:
		return CSTR("CO_E_WRONGOSFORAPP");
	case 0x800401FB:
		return CSTR("CO_E_OBJNOTREG");
	case 0x800401FC:
		return CSTR("CO_E_OBJISREG");
	case 0x800401FD:
		return CSTR("CO_E_OBJNOTCONNECTED");
	case 0x800401FE:
		return CSTR("CO_E_APPDIDNTREG");
	case 0x800401FF:
		return CSTR("CO_E_RELEASED");
	case 0x00040200:
		return CSTR("EVENT_S_SOME_SUBSCRIBERS_FAILED");
	case 0x80040201:
		return CSTR("EVENT_E_ALL_SUBSCRIBERS_FAILED");
	case 0x00040202:
		return CSTR("EVENT_S_NOSUBSCRIBERS");
	case 0x80040203:
		return CSTR("EVENT_E_QUERYSYNTAX");
	case 0x80040204:
		return CSTR("EVENT_E_QUERYFIELD");
	case 0x80040205:
		return CSTR("EVENT_E_INTERNALEXCEPTION");
	case 0x80040206:
		return CSTR("EVENT_E_INTERNALERROR");
	case 0x80040207:
		return CSTR("EVENT_E_INVALID_PER_USER_SID");
	case 0x80040208:
		return CSTR("EVENT_E_USER_EXCEPTION");
	case 0x80040209:
		return CSTR("EVENT_E_TOO_MANY_METHODS");
	case 0x8004020A:
		return CSTR("EVENT_E_MISSING_EVENTCLASS");
	case 0x8004020B:
		return CSTR("EVENT_E_NOT_ALL_REMOVED");
	case 0x8004020C:
		return CSTR("EVENT_E_COMPLUS_NOT_INSTALLED");
	case 0x8004020D:
		return CSTR("EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT");
	case 0x8004020E:
		return CSTR("EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT");
	case 0x8004020F:
		return CSTR("EVENT_E_INVALID_EVENT_CLASS_PARTITION");
	case 0x80040210:
		return CSTR("EVENT_E_PER_USER_SID_NOT_LOGGED_ON");
	case 0x80070005:
		return CSTR("E_ACCESSDENIED");
	case 0x80070006:
		return CSTR("E_HANDLE");
	case 0x8007000E:
		return CSTR("E_OUTOFMEMORY");
	case 0x80070057:
		return CSTR("E_INVALIDARG");
	case 0x8007007A:
		return CSTR("E_NOT_SUFFICIENT_BUFFER");
	case 0x80090001:
		return CSTR("NTE_BAD_UID");
	case 0x80090002:
		return CSTR("NTE_BAD_HASH");
	case 0x80090003:
		return CSTR("NTE_BAD_KEY");
	case 0x80090004:
		return CSTR("NTE_BAD_LEN");
	case 0x80090005:
		return CSTR("NTE_BAD_DATA");
	case 0x80090006:
		return CSTR("NTE_BAD_SIGNATURE");
	case 0x80090007:
		return CSTR("NTE_BAD_VER");
	case 0x80090008:
		return CSTR("NTE_BAD_ALGID");
	case 0x80090009:
		return CSTR("NTE_BAD_FLAGS");
	case 0x8009000A:
		return CSTR("NTE_BAD_TYPE");
	case 0x8009000B:
		return CSTR("NTE_BAD_KEY_STATE");
	case 0x8009000C:
		return CSTR("NTE_BAD_HASH_STATE");
	case 0x8009000D:
		return CSTR("NTE_NO_KEY");
	case 0x8009000E:
		return CSTR("NTE_NO_MEMORY");
	case 0x8009000F:
		return CSTR("NTE_EXISTS");
	case 0x80090010:
		return CSTR("NTE_PERM");
	case 0x80090011:
		return CSTR("NTE_NOT_FOUND");
	case 0x80090012:
		return CSTR("NTE_DOUBLE_ENCRYPT");
	case 0x80090013:
		return CSTR("NTE_BAD_PROVIDER");
	case 0x80090014:
		return CSTR("NTE_BAD_PROV_TYPE");
	case 0x80090015:
		return CSTR("NTE_BAD_PUBLIC_KEY");
	case 0x80090016:
		return CSTR("NTE_BAD_KEYSET");
	case 0x80090017:
		return CSTR("NTE_PROV_TYPE_NOT_DEF");
	case 0x80090018:
		return CSTR("NTE_PROV_TYPE_ENTRY_BAD");
	case 0x80090019:
		return CSTR("NTE_KEYSET_NOT_DEF");
	case 0x8009001A:
		return CSTR("NTE_KEYSET_ENTRY_BAD");
	case 0x8009001B:
		return CSTR("NTE_PROV_TYPE_NO_MATCH");
	case 0x8009001C:
		return CSTR("NTE_SIGNATURE_FILE_BAD");
	case 0x8009001D:
		return CSTR("NTE_PROVIDER_DLL_FAIL");
	case 0x8009001E:
		return CSTR("NTE_PROV_DLL_NOT_FOUND");
	case 0x8009001F:
		return CSTR("NTE_BAD_KEYSET_PARAM");
	case 0x80090020:
		return CSTR("NTE_FAIL");
	case 0x80090021:
		return CSTR("NTE_SYS_ERR");
	case 0x80090022:
		return CSTR("NTE_SILENT_CONTEXT");
	case 0x80090023:
		return CSTR("NTE_TOKEN_KEYSET_STORAGE_FULL");
	case 0x80090024:
		return CSTR("NTE_TEMPORARY_PROFILE");
	case 0x80090025:
		return CSTR("NTE_FIXEDPARAMETER");
	case 0x80090026:
		return CSTR("NTE_INVALID_HANDLE");
	case 0x80090027:
		return CSTR("NTE_INVALID_PARAMETER");
	case 0x80090028:
		return CSTR("NTE_BUFFER_TOO_SMALL");
	case 0x80090029:
		return CSTR("NTE_NOT_SUPPORTED");
	case 0x8009002A:
		return CSTR("NTE_NO_MORE_ITEMS");
	case 0x8009002B:
		return CSTR("NTE_BUFFERS_OVERLAP");
	case 0x8009002C:
		return CSTR("NTE_DECRYPTION_FAILURE");
	case 0x8009002D:
		return CSTR("NTE_INTERNAL_ERROR");
	case 0x8009002E:
		return CSTR("NTE_UI_REQUIRED");
	case 0x8009002F:
		return CSTR("NTE_HMAC_NOT_SUPPORTED");
	case 0x80090030:
		return CSTR("NTE_DEVICE_NOT_READY");
	case 0x80090031:
		return CSTR("NTE_AUTHENTICATION_IGNORED");
	case 0x80090032:
		return CSTR("NTE_VALIDATION_FAILED");
	case 0x80090033:
		return CSTR("NTE_INCORRECT_PASSWORD");
	case 0x80090034:
		return CSTR("NTE_ENCRYPTION_FAILURE");
	case 0x80090035:
		return CSTR("NTE_DEVICE_NOT_FOUND");
	case 0x80090036:
		return CSTR("NTE_USER_CANCELLED");
	case 0x80090037:
		return CSTR("NTE_PASSWORD_CHANGE_REQUIRED");
	case 0x80090038:
		return CSTR("NTE_NOT_ACTIVE_CONSOLE");
	case 0x80090300:
		return CSTR("SEC_E_INSUFFICIENT_MEMORY");
	case 0x80090301:
		return CSTR("SEC_E_INVALID_HANDLE");
	case 0x80090302:
		return CSTR("SEC_E_UNSUPPORTED_FUNCTION");
	case 0x80090303:
		return CSTR("SEC_E_TARGET_UNKNOWN");
	case 0x80090304:
		return CSTR("SEC_E_INTERNAL_ERROR");
	case 0x80090305:
		return CSTR("SEC_E_SECPKG_NOT_FOUND");
	case 0x80090306:
		return CSTR("SEC_E_NOT_OWNER");
	case 0x80090307:
		return CSTR("SEC_E_CANNOT_INSTALL");
	case 0x80090308:
		return CSTR("SEC_E_INVALID_TOKEN");
	case 0x80090309:
		return CSTR("SEC_E_CANNOT_PACK");
	case 0x8009030A:
		return CSTR("SEC_E_QOP_NOT_SUPPORTED");
	case 0x8009030B:
		return CSTR("SEC_E_NO_IMPERSONATION");
	case 0x8009030C:
		return CSTR("SEC_E_LOGON_DENIED");
	case 0x8009030D:
		return CSTR("SEC_E_UNKNOWN_CREDENTIALS");
	case 0x8009030E:
		return CSTR("SEC_E_NO_CREDENTIALS");
	case 0x8009030F:
		return CSTR("SEC_E_MESSAGE_ALTERED");
	case 0x80090310:
		return CSTR("SEC_E_OUT_OF_SEQUENCE");
	case 0x80090311:
		return CSTR("SEC_E_NO_AUTHENTICATING_AUTHORITY");
	case 0x80090316:
		return CSTR("SEC_E_BAD_PKGID");
	case 0x80090317:
		return CSTR("SEC_E_CONTEXT_EXPIRED");
	case 0x80090318:
		return CSTR("SEC_E_INCOMPLETE_MESSAGE");
	case 0x80090320:
		return CSTR("SEC_E_INCOMPLETE_CREDENTIALS");
	case 0x80090321:
		return CSTR("SEC_E_BUFFER_TOO_SMALL");
	case 0x80090322:
		return CSTR("SEC_E_WRONG_PRINCIPAL");
	case 0x80090324:
		return CSTR("SEC_E_TIME_SKEW");
	case 0x80090325:
		return CSTR("SEC_E_UNTRUSTED_ROOT");
	case 0x80090326:
		return CSTR("SEC_E_ILLEGAL_MESSAGE");
	case 0x80090327:
		return CSTR("SEC_E_CERT_UNKNOWN");
	case 0x80090328:
		return CSTR("SEC_E_CERT_EXPIRED");
	case 0x80090329:
		return CSTR("SEC_E_ENCRYPT_FAILURE");
	case 0x80090330:
		return CSTR("SEC_E_DECRYPT_FAILURE");
	case 0x80090331:
		return CSTR("SEC_E_ALGORITHM_MISMATCH");
	case 0x80090332:
		return CSTR("SEC_E_SECURITY_QOS_FAILED");
	case 0x80090333:
		return CSTR("SEC_E_UNFINISHED_CONTEXT_DELETED");
	case 0x80090334:
		return CSTR("SEC_E_NO_TGT_REPLY");
	case 0x80090335:
		return CSTR("SEC_E_NO_IP_ADDRESSES");
	case 0x80090336:
		return CSTR("SEC_E_WRONG_CREDENTIAL_HANDLE");
	case 0x80090337:
		return CSTR("SEC_E_CRYPTO_SYSTEM_INVALID");
	case 0x80090338:
		return CSTR("SEC_E_MAX_REFERRALS_EXCEEDED");
	case 0x80090339:
		return CSTR("SEC_E_MUST_BE_KDC");
	case 0x8009033A:
		return CSTR("SEC_E_STRONG_CRYPTO_NOT_SUPPORTED");
	case 0x8009033B:
		return CSTR("SEC_E_TOO_MANY_PRINCIPALS");
	case 0x8009033C:
		return CSTR("SEC_E_NO_PA_DATA");
	case 0x8009033D:
		return CSTR("SEC_E_PKINIT_NAME_MISMATCH");
	case 0x8009033E:
		return CSTR("SEC_E_SMARTCARD_LOGON_REQUIRED");
	case 0x8009033F:
		return CSTR("SEC_E_SHUTDOWN_IN_PROGRESS");
	case 0x80090340:
		return CSTR("SEC_E_KDC_INVALID_REQUEST");
	case 0x80090341:
		return CSTR("SEC_E_KDC_UNABLE_TO_REFER");
	case 0x80090342:
		return CSTR("SEC_E_KDC_UNKNOWN_ETYPE");
	case 0x80090343:
		return CSTR("SEC_E_UNSUPPORTED_PREAUTH");
	case 0x80090345:
		return CSTR("SEC_E_DELEGATION_REQUIRED");
	case 0x80090346:
		return CSTR("SEC_E_BAD_BINDINGS");
	case 0x80090347:
		return CSTR("SEC_E_MULTIPLE_ACCOUNTS");
	case 0x80090348:
		return CSTR("SEC_E_NO_KERB_KEY");
	case 0x80090349:
		return CSTR("SEC_E_CERT_WRONG_USAGE");
	case 0x80090350:
		return CSTR("SEC_E_DOWNGRADE_DETECTED");
	case 0x80090351:
		return CSTR("SEC_E_SMARTCARD_CERT_REVOKED");
	case 0x80090352:
		return CSTR("SEC_E_ISSUING_CA_UNTRUSTED");
	case 0x80090353:
		return CSTR("SEC_E_REVOCATION_OFFLINE_C");
	case 0x80090354:
		return CSTR("SEC_E_PKINIT_CLIENT_FAILURE");
	case 0x80090355:
		return CSTR("SEC_E_SMARTCARD_CERT_EXPIRED");
	case 0x80090356:
		return CSTR("SEC_E_NO_S4U_PROT_SUPPORT");
	case 0x80090357:
		return CSTR("SEC_E_CROSSREALM_DELEGATION_FAILURE");
	case 0x80090358:
		return CSTR("SEC_E_REVOCATION_OFFLINE_KDC");
	case 0x80090359:
		return CSTR("SEC_E_ISSUING_CA_UNTRUSTED_KDC");
	case 0x8009035A:
		return CSTR("SEC_E_KDC_CERT_EXPIRED");
	case 0x8009035B:
		return CSTR("SEC_E_KDC_CERT_REVOKED");
	case 0x8009035D:
		return CSTR("SEC_E_INVALID_PARAMETER");
	case 0x8009035E:
		return CSTR("SEC_E_DELEGATION_POLICY");
	case 0x8009035F:
		return CSTR("SEC_E_POLICY_NLTM_ONLY");
	case 0x80090361:
		return CSTR("SEC_E_NO_CONTEXT");
	case 0x80090362:
		return CSTR("SEC_E_PKU2U_CERT_FAILURE");
	case 0x80090363:
		return CSTR("SEC_E_MUTUAL_AUTH_FAILED");
	case 0x80090365:
		return CSTR("SEC_E_ONLY_HTTPS_ALLOWED");
	case 0x80090367:
		return CSTR("SEC_E_APPLICATION_PROTOCOL_MISMATCH");
	case 0x80090369:
		return CSTR("SEC_E_INVALID_UPN_NAME");
	case 0x8009036A:
		return CSTR("SEC_E_EXT_BUFFER_TOO_SMALL");
	case 0x8009036B:
		return CSTR("SEC_E_INSUFFICIENT_BUFFERS");
	case 0x80091001:
		return CSTR("CRYPT_E_MSG_ERROR");
	case 0x80091002:
		return CSTR("CRYPT_E_UNKNOWN_ALGO");
	case 0x80091003:
		return CSTR("CRYPT_E_OID_FORMAT");
	case 0x80091004:
		return CSTR("CRYPT_E_INVALID_MSG_TYPE");
	case 0x80091005:
		return CSTR("CRYPT_E_UNEXPECTED_ENCODING");
	case 0x80091006:
		return CSTR("CRYPT_E_AUTH_ATTR_MISSING");
	case 0x80091007:
		return CSTR("CRYPT_E_HASH_VALUE");
	case 0x80091008:
		return CSTR("CRYPT_E_INVALID_INDEX");
	case 0x80091009:
		return CSTR("CRYPT_E_ALREADY_DECRYPTED");
	case 0x8009100A:
		return CSTR("CRYPT_E_NOT_DECRYPTED");
	case 0x8009100B:
		return CSTR("CRYPT_E_RECIPIENT_NOT_FOUND");
	case 0x8009100C:
		return CSTR("CRYPT_E_CONTROL_TYPE");
	case 0x8009100D:
		return CSTR("CRYPT_E_ISSUER_SERIALNUMBER");
	case 0x8009100E:
		return CSTR("CRYPT_E_SIGNER_NOT_FOUND");
	case 0x8009100F:
		return CSTR("CRYPT_E_ATTRIBUTES_MISSING");
	case 0x80091010:
		return CSTR("CRYPT_E_STREAM_MSG_NOT_READY");
	case 0x80091011:
		return CSTR("CRYPT_E_STREAM_INSUFFICIENT_DATA");
	case 0x80091012:
		return CSTR("CRYPT_I_NEW_PROTECTION_REQUIRED");
	case 0x80092001:
		return CSTR("CRYPT_E_BAD_LEN");
	case 0x80092002:
		return CSTR("CRYPT_E_BAD_ENCODE");
	case 0x80092003:
		return CSTR("CRYPT_E_FILE_ERROR");
	case 0x80092004:
		return CSTR("CRYPT_E_NOT_FOUND");
	case 0x80092005:
		return CSTR("CRYPT_E_EXISTS");
	case 0x80092006:
		return CSTR("CRYPT_E_NO_PROVIDER");
	case 0x80092007:
		return CSTR("CRYPT_E_SELF_SIGNED");
	case 0x80092008:
		return CSTR("CRYPT_E_DELETED_PREV");
	case 0x80092009:
		return CSTR("CRYPT_E_NO_MATCH");
	case 0x8009200A:
		return CSTR("CRYPT_E_UNEXPECTED_MSG_TYPE");
	case 0x8009200B:
		return CSTR("CRYPT_E_NO_KEY_PROPERTY");
	case 0x8009200C:
		return CSTR("CRYPT_E_NO_DECRYPT_CERT");
	case 0x8009200D:
		return CSTR("CRYPT_E_BAD_MSG");
	case 0x8009200E:
		return CSTR("CRYPT_E_NO_SIGNER");
	case 0x8009200F:
		return CSTR("CRYPT_E_PENDING_CLOSE");
	case 0x80092010:
		return CSTR("CRYPT_E_REVOKED");
	case 0x80092011:
		return CSTR("CRYPT_E_NO_REVOCATION_DLL");
	case 0x80092012:
		return CSTR("CRYPT_E_NO_REVOCATION_CHECK");
	case 0x80092013:
		return CSTR("CRYPT_E_REVOCATION_OFFLINE");
	case 0x80092014:
		return CSTR("CRYPT_E_NOT_IN_REVOCATION_DATABASE");
	case 0x80092020:
		return CSTR("CRYPT_E_INVALID_NUMERIC_STRING");
	case 0x80092021:
		return CSTR("CRYPT_E_INVALID_PRINTABLE_STRING");
	case 0x80092022:
		return CSTR("CRYPT_E_INVALID_IA5_STRING");
	case 0x80092023:
		return CSTR("CRYPT_E_INVALID_X500_STRING");
	case 0x80092024:
		return CSTR("CRYPT_E_NOT_CHAR_STRING");
	case 0x80092025:
		return CSTR("CRYPT_E_FILERESIZED");
	case 0x80092026:
		return CSTR("CRYPT_E_SECURITY_SETTINGS");
	case 0x80092027:
		return CSTR("CRYPT_E_NO_VERIFY_USAGE_DLL");
	case 0x80092028:
		return CSTR("CRYPT_E_NO_VERIFY_USAGE_CHECK");
	case 0x80092029:
		return CSTR("CRYPT_E_VERIFY_USAGE_OFFLINE");
	case 0x8009202A:
		return CSTR("CRYPT_E_NOT_IN_CTL");
	case 0x8009202B:
		return CSTR("CRYPT_E_NO_TRUSTED_SIGNER");
	case 0x8009202C:
		return CSTR("CRYPT_E_MISSING_PUBKEY_PARA");
	case 0x8009202D:
		return CSTR("CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND");
	case 0x80093000:
		return CSTR("CRYPT_E_OSS_ERROR");
	case 0x80093001:
		return CSTR("OSS_MORE_BUF");
	case 0x80093002:
		return CSTR("OSS_NEGATIVE_UINTEGER");
	case 0x80093003:
		return CSTR("OSS_PDU_RANGE");
	case 0x80093004:
		return CSTR("OSS_MORE_INPUT");
	case 0x80093005:
		return CSTR("OSS_DATA_ERROR");
	case 0x80093006:
		return CSTR("OSS_BAD_ARG");
	case 0x80093007:
		return CSTR("OSS_BAD_VERSION");
	case 0x80093008:
		return CSTR("OSS_OUT_MEMORY");
	case 0x80093009:
		return CSTR("OSS_PDU_MISMATCH");
	case 0x8009300A:
		return CSTR("OSS_LIMITED");
	case 0x8009300B:
		return CSTR("OSS_BAD_PTR");
	case 0x8009300C:
		return CSTR("OSS_BAD_TIME");
	case 0x8009300D:
		return CSTR("OSS_INDEFINITE_NOT_SUPPORTED");
	case 0x8009300E:
		return CSTR("OSS_MEM_ERROR");
	case 0x8009300F:
		return CSTR("OSS_BAD_TABLE");
	case 0x80093010:
		return CSTR("OSS_TOO_LONG");
	case 0x80093011:
		return CSTR("OSS_CONSTRAINT_VIOLATED");
	case 0x80093012:
		return CSTR("OSS_FATAL_ERROR");
	case 0x80093013:
		return CSTR("OSS_ACCESS_SERIALIZATION_ERROR");
	case 0x80093014:
		return CSTR("OSS_NULL_TBL");
	case 0x80093015:
		return CSTR("OSS_NULL_FCN");
	case 0x80093016:
		return CSTR("OSS_BAD_ENCRULES");
	case 0x80093017:
		return CSTR("OSS_UNAVAIL_ENCRULES");
	case 0x80093018:
		return CSTR("OSS_CANT_OPEN_TRACE_WINDOW");
	case 0x80093019:
		return CSTR("OSS_UNIMPLEMENTED");
	case 0x8009301A:
		return CSTR("OSS_OID_DLL_NOT_LINKED");
	case 0x8009301B:
		return CSTR("OSS_CANT_OPEN_TRACE_FILE");
	case 0x8009301C:
		return CSTR("OSS_TRACE_FILE_ALREADY_OPEN");
	case 0x8009301D:
		return CSTR("OSS_TABLE_MISMATCH");
	case 0x8009301E:
		return CSTR("OSS_TYPE_NOT_SUPPORTED");
	case 0x8009301F:
		return CSTR("OSS_REAL_DLL_NOT_LINKED");
	case 0x80093020:
		return CSTR("OSS_REAL_CODE_NOT_LINKED");
	case 0x80093021:
		return CSTR("OSS_OUT_OF_RANGE");
	case 0x80093022:
		return CSTR("OSS_COPIER_DLL_NOT_LINKED");
	case 0x80093023:
		return CSTR("OSS_CONSTRAINT_DLL_NOT_LINKED");
	case 0x80093024:
		return CSTR("OSS_COMPARATOR_DLL_NOT_LINKED");
	case 0x80093025:
		return CSTR("OSS_COMPARATOR_CODE_NOT_LINKED");
	case 0x80093026:
		return CSTR("OSS_MEM_MGR_DLL_NOT_LINKED");
	case 0x80093027:
		return CSTR("OSS_PDV_DLL_NOT_LINKED");
	case 0x80093028:
		return CSTR("OSS_PDV_CODE_NOT_LINKED");
	case 0x80093029:
		return CSTR("OSS_API_DLL_NOT_LINKED");
	case 0x8009302A:
		return CSTR("OSS_BERDER_DLL_NOT_LINKED");
	case 0x8009302B:
		return CSTR("OSS_PER_DLL_NOT_LINKED");
	case 0x8009302C:
		return CSTR("OSS_OPEN_TYPE_ERROR");
	case 0x8009302D:
		return CSTR("OSS_MUTEX_NOT_CREATED");
	case 0x8009302E:
		return CSTR("OSS_CANT_CLOSE_TRACE_FILE");
	case 0x80093100:
		return CSTR("CRYPT_E_ASN1_ERROR");
	case 0x80093101:
		return CSTR("CRYPT_E_ASN1_INTERNAL");
	case 0x80093102:
		return CSTR("CRYPT_E_ASN1_EOD");
	case 0x80093103:
		return CSTR("CRYPT_E_ASN1_CORRUPT");
	case 0x80093104:
		return CSTR("CRYPT_E_ASN1_LARGE");
	case 0x80093105:
		return CSTR("CRYPT_E_ASN1_CONSTRAINT");
	case 0x80093106:
		return CSTR("CRYPT_E_ASN1_MEMORY");
	case 0x80093107:
		return CSTR("CRYPT_E_ASN1_OVERFLOW");
	case 0x80093108:
		return CSTR("CRYPT_E_ASN1_BADPDU");
	case 0x80093109:
		return CSTR("CRYPT_E_ASN1_BADARGS");
	case 0x8009310A:
		return CSTR("CRYPT_E_ASN1_BADREAL");
	case 0x8009310B:
		return CSTR("CRYPT_E_ASN1_BADTAG");
	case 0x8009310C:
		return CSTR("CRYPT_E_ASN1_CHOICE");
	case 0x8009310D:
		return CSTR("CRYPT_E_ASN1_RULE");
	case 0x8009310E:
		return CSTR("CRYPT_E_ASN1_UTF8");
	case 0xC0000001L:
		return CSTR("STATUS_UNSUCCESSFUL");
	case 0xC0000002L:
		return CSTR("STATUS_NOT_IMPLEMENTED");
	case 0xC0000003L:
		return CSTR("STATUS_INVALID_INFO_CLASS");
	case 0xC0000004L:
		return CSTR("STATUS_INFO_LENGTH_MISMATCH");
	case 0xC0000005L:
		return CSTR("STATUS_ACCESS_VIOLATION");
	case 0xC0000006L:
		return CSTR("STATUS_IN_PAGE_ERROR");
	case 0xC0000007L:
		return CSTR("STATUS_PAGEFILE_QUOTA");
	case 0xC0000008L:
		return CSTR("STATUS_INVALID_HANDLE");
	case 0xC0000009L:
		return CSTR("STATUS_BAD_INITIAL_STACK");
	case 0xC000000AL:
		return CSTR("STATUS_BAD_INITIAL_PC");
	case 0xC000000BL:
		return CSTR("STATUS_INVALID_CID");
	case 0xC000000CL:
		return CSTR("STATUS_TIMER_NOT_CANCELED");
	case 0xC000000DL:
		return CSTR("STATUS_INVALID_PARAMETER");
	case 0xC000000EL:
		return CSTR("STATUS_NO_SUCH_DEVICE");
	case 0xC000000FL:
		return CSTR("STATUS_NO_SUCH_FILE");
	case 0xC0000010L:
		return CSTR("STATUS_INVALID_DEVICE_REQUEST");
	case 0xC0000011L:
		return CSTR("STATUS_END_OF_FILE");
	case 0xC0000012L:
		return CSTR("STATUS_WRONG_VOLUME");
	case 0xC0000013L:
		return CSTR("STATUS_NO_MEDIA_IN_DEVICE");
	case 0xC0000014L:
		return CSTR("STATUS_UNRECOGNIZED_MEDIA");
	case 0xC0000015L:
		return CSTR("STATUS_NONEXISTENT_SECTOR");
	case 0xC0000016L:
		return CSTR("STATUS_MORE_PROCESSING_REQUIRED");
	case 0xC0000017L:
		return CSTR("STATUS_NO_MEMORY");
	case 0xC0000018L:
		return CSTR("STATUS_CONFLICTING_ADDRESSES");
	case 0xC0000019L:
		return CSTR("STATUS_NOT_MAPPED_VIEW");
	case 0xC000001AL:
		return CSTR("STATUS_UNABLE_TO_FREE_VM");
	case 0xC000001BL:
		return CSTR("STATUS_UNABLE_TO_DELETE_SECTION");
	case 0xC000001CL:
		return CSTR("STATUS_INVALID_SYSTEM_SERVICE");
	case 0xC000001DL:
		return CSTR("STATUS_ILLEGAL_INSTRUCTION");
	case 0xC000001EL:
		return CSTR("STATUS_INVALID_LOCK_SEQUENCE");
	case 0xC000001FL:
		return CSTR("STATUS_INVALID_VIEW_SIZE");
	case 0xC0000020L:
		return CSTR("STATUS_INVALID_FILE_FOR_SECTION");
	case 0xC0000021L:
		return CSTR("STATUS_ALREADY_COMMITTED");
	case 0xC0000022L:
		return CSTR("STATUS_ACCESS_DENIED");
	case 0xC0000023L:
		return CSTR("STATUS_BUFFER_TOO_SMALL");
	case 0xC0000024L:
		return CSTR("STATUS_OBJECT_TYPE_MISMATCH");
	case 0xC0000025L:
		return CSTR("STATUS_NONCONTINUABLE_EXCEPTION");
	case 0xC0000026L:
		return CSTR("STATUS_INVALID_DISPOSITION");
	case 0xC0000027L:
		return CSTR("STATUS_UNWIND");
	case 0xC0000028L:
		return CSTR("STATUS_BAD_STACK");
	case 0xC0000029L:
		return CSTR("STATUS_INVALID_UNWIND_TARGET");
	case 0xC000002AL:
		return CSTR("STATUS_NOT_LOCKED");
	case 0xC000002BL:
		return CSTR("STATUS_PARITY_ERROR");
	case 0xC000002CL:
		return CSTR("STATUS_UNABLE_TO_DECOMMIT_VM");
	case 0xC000002DL:
		return CSTR("STATUS_NOT_COMMITTED");
	case 0xC000002EL:
		return CSTR("STATUS_INVALID_PORT_ATTRIBUTES");
	case 0xC000002FL:
		return CSTR("STATUS_PORT_MESSAGE_TOO_LONG");
	case 0xC0000030L:
		return CSTR("STATUS_INVALID_PARAMETER_MIX");
	case 0xC0000031L:
		return CSTR("STATUS_INVALID_QUOTA_LOWER");
	case 0xC0000032L:
		return CSTR("STATUS_DISK_CORRUPT_ERROR");
	case 0xC0000033L:
		return CSTR("STATUS_OBJECT_NAME_INVALID");
	case 0xC0000034L:
		return CSTR("STATUS_OBJECT_NAME_NOT_FOUND");
	case 0xC0000035L:
		return CSTR("STATUS_OBJECT_NAME_COLLISION");
	case 0xC0000036L:
		return CSTR("STATUS_PORT_DO_NOT_DISTURB");
	case 0xC0000037L:
		return CSTR("STATUS_PORT_DISCONNECTED");
	case 0xC0000038L:
		return CSTR("STATUS_DEVICE_ALREADY_ATTACHED");
	case 0xC0000039L:
		return CSTR("STATUS_OBJECT_PATH_INVALID");
	case 0xC000003AL:
		return CSTR("STATUS_OBJECT_PATH_NOT_FOUND");
	case 0xC000003BL:
		return CSTR("STATUS_OBJECT_PATH_SYNTAX_BAD");
	case 0xC000003CL:
		return CSTR("STATUS_DATA_OVERRUN");
	case 0xC000003DL:
		return CSTR("STATUS_DATA_LATE_ERROR");
	case 0xC000003EL:
		return CSTR("STATUS_DATA_ERROR");
	case 0xC000003FL:
		return CSTR("STATUS_CRC_ERROR");
	case 0xC0000040L:
		return CSTR("STATUS_SECTION_TOO_BIG");
	case 0xC0000041L:
		return CSTR("STATUS_PORT_CONNECTION_REFUSED");
	case 0xC0000042L:
		return CSTR("STATUS_INVALID_PORT_HANDLE");
	case 0xC0000043L:
		return CSTR("STATUS_SHARING_VIOLATION");
	case 0xC0000044L:
		return CSTR("STATUS_QUOTA_EXCEEDED");
	case 0xC0000045L:
		return CSTR("STATUS_INVALID_PAGE_PROTECTION");
	case 0xC0000046L:
		return CSTR("STATUS_MUTANT_NOT_OWNED");
	case 0xC0000047L:
		return CSTR("STATUS_SEMAPHORE_LIMIT_EXCEEDED");
	case 0xC0000048L:
		return CSTR("STATUS_PORT_ALREADY_SET");
	case 0xC0000049L:
		return CSTR("STATUS_SECTION_NOT_IMAGE");
	case 0xC000004AL:
		return CSTR("STATUS_SUSPEND_COUNT_EXCEEDED");
	case 0xC000004BL:
		return CSTR("STATUS_THREAD_IS_TERMINATING");
	case 0xC000004CL:
		return CSTR("STATUS_BAD_WORKING_SET_LIMIT");
	case 0xC000004DL:
		return CSTR("STATUS_INCOMPATIBLE_FILE_MAP");
	case 0xC000004EL:
		return CSTR("STATUS_SECTION_PROTECTION");
	case 0xC000004FL:
		return CSTR("STATUS_EAS_NOT_SUPPORTED");
	case 0xC0000050L:
		return CSTR("STATUS_EA_TOO_LARGE");
	case 0xC0000051L:
		return CSTR("STATUS_NONEXISTENT_EA_ENTRY");
	case 0xC0000052L:
		return CSTR("STATUS_NO_EAS_ON_FILE");
	case 0xC0000053L:
		return CSTR("STATUS_EA_CORRUPT_ERROR");
	case 0xC0000054L:
		return CSTR("STATUS_FILE_LOCK_CONFLICT");
	case 0xC0000055L:
		return CSTR("STATUS_LOCK_NOT_GRANTED");
	case 0xC0000056L:
		return CSTR("STATUS_DELETE_PENDING");
	case 0xC0000057L:
		return CSTR("STATUS_CTL_FILE_NOT_SUPPORTED");
	case 0xC0000058L:
		return CSTR("STATUS_UNKNOWN_REVISION");
	case 0xC0000059L:
		return CSTR("STATUS_REVISION_MISMATCH");
	case 0xC000005AL:
		return CSTR("STATUS_INVALID_OWNER");
	case 0xC000005BL:
		return CSTR("STATUS_INVALID_PRIMARY_GROUP");
	case 0xC000005CL:
		return CSTR("STATUS_NO_IMPERSONATION_TOKEN");
	case 0xC000005DL:
		return CSTR("STATUS_CANT_DISABLE_MANDATORY");
	case 0xC000005EL:
		return CSTR("STATUS_NO_LOGON_SERVERS");
	case 0xC000005FL:
		return CSTR("STATUS_NO_SUCH_LOGON_SESSION");
	case 0xC0000060L:
		return CSTR("STATUS_NO_SUCH_PRIVILEGE");
	case 0xC0000061L:
		return CSTR("STATUS_PRIVILEGE_NOT_HELD");
	case 0xC0000062L:
		return CSTR("STATUS_INVALID_ACCOUNT_NAME");
	case 0xC0000063L:
		return CSTR("STATUS_USER_EXISTS");
	case 0xC0000064L:
		return CSTR("STATUS_NO_SUCH_USER");
	case 0xC0000065L:
		return CSTR("STATUS_GROUP_EXISTS");
	case 0xC0000066L:
		return CSTR("STATUS_NO_SUCH_GROUP");
	case 0xC0000067L:
		return CSTR("STATUS_MEMBER_IN_GROUP");
	case 0xC0000068L:
		return CSTR("STATUS_MEMBER_NOT_IN_GROUP");
	case 0xC0000069L:
		return CSTR("STATUS_LAST_ADMIN");
	case 0xC000006AL:
		return CSTR("STATUS_WRONG_PASSWORD");
	case 0xC000006BL:
		return CSTR("STATUS_ILL_FORMED_PASSWORD");
	case 0xC000006CL:
		return CSTR("STATUS_PASSWORD_RESTRICTION");
	case 0xC000006DL:
		return CSTR("STATUS_LOGON_FAILURE");
	case 0xC000006EL:
		return CSTR("STATUS_ACCOUNT_RESTRICTION");
	case 0xC000006FL:
		return CSTR("STATUS_INVALID_LOGON_HOURS");
	case 0xC0000070L:
		return CSTR("STATUS_INVALID_WORKSTATION");
	case 0xC0000071L:
		return CSTR("STATUS_PASSWORD_EXPIRED");
	case 0xC0000072L:
		return CSTR("STATUS_ACCOUNT_DISABLED");
	case 0xC0000073L:
		return CSTR("STATUS_NONE_MAPPED");
	case 0xC0000074L:
		return CSTR("STATUS_TOO_MANY_LUIDS_REQUESTED");
	case 0xC0000075L:
		return CSTR("STATUS_LUIDS_EXHAUSTED");
	case 0xC0000076L:
		return CSTR("STATUS_INVALID_SUB_AUTHORITY");
	case 0xC0000077L:
		return CSTR("STATUS_INVALID_ACL");
	case 0xC0000078L:
		return CSTR("STATUS_INVALID_SID");
	case 0xC0000079L:
		return CSTR("STATUS_INVALID_SECURITY_DESCR");
	case 0xC000007AL:
		return CSTR("STATUS_PROCEDURE_NOT_FOUND");
	case 0xC000007BL:
		return CSTR("STATUS_INVALID_IMAGE_FORMAT");
	case 0xC000007CL:
		return CSTR("STATUS_NO_TOKEN");
	case 0xC000007DL:
		return CSTR("STATUS_BAD_INHERITANCE_ACL");
	case 0xC000007EL:
		return CSTR("STATUS_RANGE_NOT_LOCKED");
	case 0xC000007FL:
		return CSTR("STATUS_DISK_FULL");
	case 0xC0000080L:
		return CSTR("STATUS_SERVER_DISABLED");
	case 0xC0000081L:
		return CSTR("STATUS_SERVER_NOT_DISABLED");
	case 0xC0000082L:
		return CSTR("STATUS_TOO_MANY_GUIDS_REQUESTED");
	case 0xC0000083L:
		return CSTR("STATUS_GUIDS_EXHAUSTED");
	case 0xC0000084L:
		return CSTR("STATUS_INVALID_ID_AUTHORITY");
	case 0xC0000085L:
		return CSTR("STATUS_AGENTS_EXHAUSTED");
	case 0xC0000086L:
		return CSTR("STATUS_INVALID_VOLUME_LABEL");
	case 0xC0000087L:
		return CSTR("STATUS_SECTION_NOT_EXTENDED");
	case 0xC0000088L:
		return CSTR("STATUS_NOT_MAPPED_DATA");
	case 0xC0000089L:
		return CSTR("STATUS_RESOURCE_DATA_NOT_FOUND");
	case 0xC000008AL:
		return CSTR("STATUS_RESOURCE_TYPE_NOT_FOUND");
	case 0xC000008BL:
		return CSTR("STATUS_RESOURCE_NAME_NOT_FOUND");
	case 0xC000008CL:
		return CSTR("STATUS_ARRAY_BOUNDS_EXCEEDED");
	case 0xC000008DL:
		return CSTR("STATUS_FLOAT_DENORMAL_OPERAND");
	case 0xC000008EL:
		return CSTR("STATUS_FLOAT_DIVIDE_BY_ZERO");
	case 0xC000008FL:
		return CSTR("STATUS_FLOAT_INEXACT_RESULT");
	case 0xC0000090L:
		return CSTR("STATUS_FLOAT_INVALID_OPERATION");
	case 0xC0000091L:
		return CSTR("STATUS_FLOAT_OVERFLOW");
	case 0xC0000092L:
		return CSTR("STATUS_FLOAT_STACK_CHECK");
	case 0xC0000093L:
		return CSTR("STATUS_FLOAT_UNDERFLOW");
	case 0xC0000094L:
		return CSTR("STATUS_INTEGER_DIVIDE_BY_ZERO");
	case 0xC0000095L:
		return CSTR("STATUS_INTEGER_OVERFLOW");
	case 0xC0000096L:
		return CSTR("STATUS_PRIVILEGED_INSTRUCTION");
	case 0xC0000097L:
		return CSTR("STATUS_TOO_MANY_PAGING_FILES");
	case 0xC0000098L:
		return CSTR("STATUS_FILE_INVALID");
	case 0xC0000099L:
		return CSTR("STATUS_ALLOTTED_SPACE_EXCEEDED");
	case 0xC000009AL:
		return CSTR("STATUS_INSUFFICIENT_RESOURCES");
	case 0xC000009BL:
		return CSTR("STATUS_DFS_EXIT_PATH_FOUND");
	case 0xC000009CL:
		return CSTR("STATUS_DEVICE_DATA_ERROR");
	case 0xC000009DL:
		return CSTR("STATUS_DEVICE_NOT_CONNECTED");
	case 0xC000009EL:
		return CSTR("STATUS_DEVICE_POWER_FAILURE");
	case 0xC000009FL:
		return CSTR("STATUS_FREE_VM_NOT_AT_BASE");
	case 0xC00000A0L:
		return CSTR("STATUS_MEMORY_NOT_ALLOCATED");
	case 0xC00000A1L:
		return CSTR("STATUS_WORKING_SET_QUOTA");
	case 0xC00000A2L:
		return CSTR("STATUS_MEDIA_WRITE_PROTECTED");
	case 0xC00000A3L:
		return CSTR("STATUS_DEVICE_NOT_READY");
	case 0xC00000A4L:
		return CSTR("STATUS_INVALID_GROUP_ATTRIBUTES");
	case 0xC00000A5L:
		return CSTR("STATUS_BAD_IMPERSONATION_LEVEL");
	case 0xC00000A6L:
		return CSTR("STATUS_CANT_OPEN_ANONYMOUS");
	case 0xC00000A7L:
		return CSTR("STATUS_BAD_VALIDATION_CLASS");
	case 0xC00000A8L:
		return CSTR("STATUS_BAD_TOKEN_TYPE");
	case 0xC00000A9L:
		return CSTR("STATUS_BAD_MASTER_BOOT_RECORD");
	case 0xC00000AAL:
		return CSTR("STATUS_INSTRUCTION_MISALIGNMENT");
	case 0xC00000ABL:
		return CSTR("STATUS_INSTANCE_NOT_AVAILABLE");
	case 0xC00000ACL:
		return CSTR("STATUS_PIPE_NOT_AVAILABLE");
	case 0xC00000ADL:
		return CSTR("STATUS_INVALID_PIPE_STATE");
	case 0xC00000AEL:
		return CSTR("STATUS_PIPE_BUSY");
	case 0xC00000AFL:
		return CSTR("STATUS_ILLEGAL_FUNCTION");
	case 0xC00000B0L:
		return CSTR("STATUS_PIPE_DISCONNECTED");
	case 0xC00000B1L:
		return CSTR("STATUS_PIPE_CLOSING");
	case 0xC00000B2L:
		return CSTR("STATUS_PIPE_CONNECTED");
	case 0xC00000B3L:
		return CSTR("STATUS_PIPE_LISTENING");
	case 0xC00000B4L:
		return CSTR("STATUS_INVALID_READ_MODE");
	case 0xC00000B5L:
		return CSTR("STATUS_IO_TIMEOUT");
	case 0xC00000B6L:
		return CSTR("STATUS_FILE_FORCED_CLOSED");
	case 0xC00000B7L:
		return CSTR("STATUS_PROFILING_NOT_STARTED");
	case 0xC00000B8L:
		return CSTR("STATUS_PROFILING_NOT_STOPPED");
	case 0xC00000B9L:
		return CSTR("STATUS_COULD_NOT_INTERPRET");
	case 0xC00000BAL:
		return CSTR("STATUS_FILE_IS_A_DIRECTORY");
	case 0xC00000BBL:
		return CSTR("STATUS_NOT_SUPPORTED");
	case 0xC00000BCL:
		return CSTR("STATUS_REMOTE_NOT_LISTENING");
	case 0xC00000BDL:
		return CSTR("STATUS_DUPLICATE_NAME");
	case 0xC00000BEL:
		return CSTR("STATUS_BAD_NETWORK_PATH");
	case 0xC00000BFL:
		return CSTR("STATUS_NETWORK_BUSY");
	case 0xC00000C0L:
		return CSTR("STATUS_DEVICE_DOES_NOT_EXIST");
	case 0xC00000C1L:
		return CSTR("STATUS_TOO_MANY_COMMANDS");
	case 0xC00000C2L:
		return CSTR("STATUS_ADAPTER_HARDWARE_ERROR");
	case 0xC00000C3L:
		return CSTR("STATUS_INVALID_NETWORK_RESPONSE");
	case 0xC00000C4L:
		return CSTR("STATUS_UNEXPECTED_NETWORK_ERROR");
	case 0xC00000C5L:
		return CSTR("STATUS_BAD_REMOTE_ADAPTER");
	case 0xC00000C6L:
		return CSTR("STATUS_PRINT_QUEUE_FULL");
	case 0xC00000C7L:
		return CSTR("STATUS_NO_SPOOL_SPACE");
	case 0xC00000C8L:
		return CSTR("STATUS_PRINT_CANCELLED");
	case 0xC00000C9L:
		return CSTR("STATUS_NETWORK_NAME_DELETED");
	case 0xC00000CAL:
		return CSTR("STATUS_NETWORK_ACCESS_DENIED");
	case 0xC00000CBL:
		return CSTR("STATUS_BAD_DEVICE_TYPE");
	case 0xC00000CCL:
		return CSTR("STATUS_BAD_NETWORK_NAME");
	case 0xC00000CDL:
		return CSTR("STATUS_TOO_MANY_NAMES");
	case 0xC00000CEL:
		return CSTR("STATUS_TOO_MANY_SESSIONS");
	case 0xC00000CFL:
		return CSTR("STATUS_SHARING_PAUSED");
	case 0xC00000D0L:
		return CSTR("STATUS_REQUEST_NOT_ACCEPTED");
	case 0xC00000D1L:
		return CSTR("STATUS_REDIRECTOR_PAUSED");
	default:
		return CSTR("Unknown");
	}
}
