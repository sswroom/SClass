#include "Stdafx.h"
#include "MyMemory.h"
#include "Text/MyString.h"
#include "Text/MyStringW.h"
#include "Text/SMSUtil.h"

UTF16Char Text::SMSUtil::gsm2text[] = {
	0x040, 0x0A3, 0x024, 0x0A5, 0x0E8, 0x0E9, 0x0F9, 0x0EC,
	0x0F2, 0x0C7, 0x00A, 0x0D8, 0x0F8, 0x00D, 0x0C5, 0x0E5,
	0x394, 0x05F, 0x3A6, 0x393, 0x39B, 0x3A9, 0x3A0, 0x3A8,
	0x3A3, 0x398, 0x39E, 0x000, 0x0C6, 0x0E6, 0x0DF, 0x0C9,
	0x020, 0x021, 0x022, 0x023, 0x0A4, 0x025, 0x026, 0x027,
	0x028, 0x029, 0x02A, 0x02B, 0x02C, 0x02D, 0x02E, 0x02F,
	0x030, 0x031, 0x032, 0x033, 0x034, 0x035, 0x036, 0x037,
	0x038, 0x039, 0x03A, 0x03B, 0x03C, 0x03D, 0x03E, 0x03F,
	0x0A1, 0x041, 0x042, 0x043, 0x044, 0x045, 0x046, 0x047,
	0x048, 0x049, 0x04A, 0x04B, 0x04C, 0x04D, 0x04E, 0x04F,
	0x050, 0x051, 0x052, 0x053, 0x054, 0x055, 0x056, 0x057,
	0x058, 0x059, 0x05A, 0x0C4, 0x0D6, 0x0D1, 0x0DC, 0x0A7,
	0x0BF, 0x061, 0x062, 0x063, 0x064, 0x065, 0x066, 0x067,
	0x068, 0x069, 0x06A, 0x06B, 0x06C, 0x06D, 0x06E, 0x06F,
	0x070, 0x071, 0x072, 0x073, 0x074, 0x075, 0x076, 0x077,
	0x078, 0x079, 0x07A, 0x0E4, 0x0F6, 0x0F1, 0x0FC, 0x0E0
};
UTF16Char Text::SMSUtil::gsm1b2text[] = {
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, //
	0x000, 0x000, 0x00C, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x05E, 0x000, 0x000, 0x000, //
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, //
	0x07B, 0x07D, 0x000, 0x000, 0x000, 0x000, 0x000, 0x05C,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, //
	0x000, 0x000, 0x000, 0x000, 0x05B, 0x07E, 0x05D, 0x000,
	0x07C, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, //
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, //
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000,0x20AC, 0x000, 0x000, //
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, //
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000
};

//0x20AC = 0x1B65
UInt16 Text::SMSUtil::text2gsm[] = {
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x000A, 0xFFFF, 0x1B0A, 0x000D, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0002, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0000, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x1B3C, 0x1B2F, 0x1B3E, 0x1B14, 0x0011,
	0xFFFF, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x1B28, 0x1B40, 0x1B29, 0x1B3D, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0x0040, 0xFFFF, 0x0001, 0x0024, 0x0003, 0xFFFF, 0x005F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0060,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x005B, 0x000E, 0x001C, 0x0009, 0xFFFF, 0x001F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0x005D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x005C, 0xFFFF, 0x000B, 0xFFFF, 0xFFFF, 0xFFFF, 0x005E, 0xFFFF, 0xFFFF, 0x001E,
	0x007F, 0xFFFF, 0xFFFF, 0xFFFF, 0x007B, 0x000F, 0x001D, 0xFFFF, 0x0004, 0x0005, 0xFFFF, 0xFFFF, 0x0007, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0x007D, 0x0008, 0xFFFF, 0xFFFF, 0xFFFF, 0x007C, 0xFFFF, 0x000C, 0x0006, 0xFFFF, 0xFFFF, 0x007E, 0xFFFF, 0xFFFF, 0xFFFF,

	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,

	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,

	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0x0013, 0x0010, 0xFFFF, 0xFFFF, 0xFFFF, 0x0019, 0xFFFF, 0xFFFF, 0x0014, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF,
	0x0016, 0xFFFF, 0xFFFF, 0x0018, 0xFFFF, 0xFFFF, 0x0012, 0xFFFF, 0x0017, 0x0015, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF
};

OSInt Text::SMSUtil::ToGSMBytes(const UTF16Char *msg, UInt8 *buff, DCS *dcs, UInt32 *dataLen)
{
	UOSInt len = 0;
	Int32 t = Text::SMSUtil::DCS_GSM7BIT;
	UInt16 v;
	UTF16Char c;
	const UTF16Char *src;
	UInt8 *dest;

	src = msg;
	while ((c = *src++) != 0)
	{
		if (c == 0x20AC)
		{
			len += 2;
		}
		else if (c >= 0x400)
		{
			t = Text::SMSUtil::DCS_UCS2;
			break;
		}
		else if ((v = Text::SMSUtil::text2gsm[c]) == 0xFFFF)
		{
			t = Text::SMSUtil::DCS_UCS2;
			break;
		}
		else if (v >= 0x100)
		{
			len += 2;
		}
		else
		{
			len += 1;
		}
	}
	if (t == Text::SMSUtil::DCS_GSM7BIT)
	{
		*dcs = Text::SMSUtil::DCS_GSM7BIT;
		if (len > 160)
		{
			return -(OSInt)len;
		}
		*dataLen = (UInt32)len;
		t = 0;
		src = msg;
		dest = buff;
		while ((c = *src++) != 0)
		{
			v = text2gsm[c];
			if (v >= 0x100)
			{
				switch (t)
				{
				case 0:
					*dest++ = (UInt8)((v >> 7) & 0xfe);
					dest[-1] = (UInt8)(dest[-1] | ((UInt8)v) >> 6);
					*dest++ = (UInt8)(v << 2);
					t = 2;
					break;
				case 1:
					dest[-1] = (UInt8)(dest[-1] | (v >> 14));
					*dest++ = (UInt8)((v >> 6) & 0xfc);
					dest[-1] = (UInt8)(dest[-1] | ((v >> 5) & 3));
					*dest++ = (UInt8)(v << 3);
					t = 3;
					break;
				case 2:
					dest[-1] = (UInt8)(dest[-1] | (v >> 13));
					*dest++ = (UInt8)((v >> 5) & 0xf8);
					dest[-1] = (UInt8)(dest[-1] | ((v >> 4) & 7));
					*dest++ = (UInt8)(v << 4);
					t = 4;
					break;
				case 3:
					dest[-1] = (UInt8)(dest[-1] | (v >> 12));
					*dest++ = (UInt8)((v >> 4) & 0xf0);
					dest[-1] = (UInt8)(dest[-1] | ((v >> 3) & 7));
					*dest++ = (UInt8)(v << 5);
					t = 5;
					break;
				case 4:
					dest[-1] = (UInt8)(dest[-1] | (v >> 11));
					*dest++ = (UInt8)((v >> 3) & 0xe0);
					dest[-1] = (UInt8)(dest[-1] | ((v >> 2) & 0x1f));
					*dest++ = (UInt8)(v << 6);
					t = 6;
					break;
				case 5:
					dest[-1] = (UInt8)(dest[-1] | (v >> 10));
					*dest++ = (UInt8)((v >> 2) & 0xc0);
					dest[-1] = (UInt8)(dest[-1] | ((v >> 1) & 0x3f));
					*dest++ = (UInt8)(v << 7);
					t = 7;
					break;
				case 6:
					dest[-1] = (UInt8)(dest[-1] | (v >> 9));
					*dest++ = (UInt8)((v >> 1) & 0xf8);
					dest[-1] = (UInt8)(dest[-1] | v);
					t = 0;
					break;
				case 7:
					dest[-1] = (UInt8)(dest[-1] | (v >> 8));
					*dest++ = (UInt8)(v << 1);
					t = 1;
					break;
				}
			}
			else
			{
				switch (t)
				{
				case 0:
					*dest++ = (UInt8)(v << 1);
					t = 1;
					break;
				case 1:
					dest[-1] = (UInt8)(dest[-1] | (v >> 6));
					*dest++ = (UInt8)((v << 2) & 0xff);
					t = 2;
					break;
				case 2:
					dest[-1] = (UInt8)(dest[-1] | (v >> 5));
					*dest++ = (UInt8)((v << 3) & 0xff);
					t = 3;
					break;
				case 3:
					dest[-1] = (UInt8)(dest[-1] | (v >> 4));
					*dest++ = (UInt8)((v << 4) & 0xff);
					t = 4;
					break;
				case 4:
					dest[-1] = (UInt8)(dest[-1] | (v >> 3));
					*dest++ = (UInt8)((v << 5) & 0xff);
					t = 5;
					break;
				case 5:
					dest[-1] = (UInt8)(dest[-1] | (v >> 2));
					*dest++ = (UInt8)((v << 6) & 0xff);
					t = 6;
					break;
				case 6:
					dest[-1] = (UInt8)(dest[-1] | (v >> 1));
					*dest++ = (UInt8)((v << 7) & 0xff);
					t = 7;
					break;
				case 7:
					dest[-1] = (UInt8)(dest[-1] | v);
					t = 0;
					break;
				}
			}
		}
		return (OSInt)len;
	}
	else if (t == Text::SMSUtil::DCS_UCS2)
	{
		*dcs = Text::SMSUtil::DCS_UCS2;
		len = Text::StrCharCnt(msg) << 1;
		*dataLen = (UInt32)len;
		if (len > 140)
		{
			return -(OSInt)len;
		}
		src = msg;
		while ((c = *src++) != 0)
		{
			buff[0] = (UInt8)(c >> 8);
			buff[1] = (UInt8)c;
			buff += 2;
		}
		return (OSInt)len;
	}
	return 0;
}

OSInt Text::SMSUtil::ToUCS2Bytes(const UTF16Char *msg, UInt8 *buff)
{
	UOSInt len;
	const UTF16Char *src;
	UTF16Char c;
	len = Text::StrCharCnt(msg) << 1;
	src = msg;
	while ((c = *src++) != 0)
	{
		buff[0] = (UInt8)(c >> 8);
		buff[1] = (UInt8)c;
		buff += 2;
	}
	return (OSInt)len;
}

void Text::SMSUtil::GetTextInfo(const UTF16Char *msg, DCS *dcs, UInt32 *msgLeng)
{
	UInt8 buff[140];
	OSInt len = ToGSMBytes(msg, buff, dcs, msgLeng);
	if (len < 0)
	{
		*msgLeng = (UInt32)-len;
	}
	else
	{
		*msgLeng = (UInt32)len;
	}
}

UInt32 Text::SMSUtil::GSMTextSize2DataSize(UInt32 textSize)
{
	UInt32 nBits = textSize * 7;
	UInt32 dataSize = nBits >> 3;
	if (nBits & 7)
		dataSize++;
	return dataSize;
}

Bool Text::SMSUtil::TrimGSMText(UTF16Char *msg)
{
	UOSInt len = 0;
	UInt16 v;
	UTF16Char c;
	UTF16Char *src;

	src = msg;
	while ((c = *src++) != 0)
	{
		if (c == 0x20AC)
		{
			len += 2;
		}
		else if (c >= 0x400)
		{
			return false;
		}
		else if ((v = Text::SMSUtil::text2gsm[c]) == 0xFFFF)
		{
			return false;
		}
		else if (v >= 0x100)
		{
			len += 2;
		}
		else
		{
			len += 1;
		}
		if (len >= 160)
		{
			*msg = 0;
			return true;
		}
	}
	return true;
}

UTF16Char *Text::SMSUtil::TrimGSMText(UTF16Char *destBuff, const UTF16Char *msg, UInt32 dataLen)
{
	UOSInt len = 0;
	UInt16 v;
	UTF16Char c;
	const UTF16Char *src;
	Int32 t = 0;

	src = msg;
	while ((c = *src++) != 0)
	{
		if (c == 0x20AC)
		{
			v = 0x1b65;
		}
		else if (c >= 0x400)
		{
			return 0;
		}
		else if ((v = Text::SMSUtil::text2gsm[c]) == 0xFFFF)
		{
			return 0;
		}
		if (v >= 0x100)
		{
			if (t == 6 || t == 7)
			{
				if (len + 1 > dataLen)
				{
					*destBuff = 0;
					return destBuff;
				}
				t = (t + 2) & 7;
				len++;
			}
			else
			{
				if (len + 2 > dataLen)
				{
					*destBuff = 0;
					return destBuff;
				}
				t += 2;
				len += 2;
			}
			*destBuff++ = c;
		}
		else
		{
			if (t == 7)
			{
				t = 0;
			}
			else
			{
				if (len >= dataLen)
				{
					*destBuff = 0;
					return destBuff;
				}
				len++;
				t++;
			}
			*destBuff++ = c;
		}
	}
	*destBuff = 0;
	return destBuff;
}

Bool Text::SMSUtil::IsPhone(const UTF16Char *txt)
{
	if (txt[0] == '+')
	{
		txt++;
	}
	UTF16Char c;
	if (txt[0] == 0)
		return false;
	while ((c = *txt++) != 0)
	{
		if (c < '0' && c > '9')
			return false;
	}
	return true;
}

Bool Text::SMSUtil::IsIntlPhone(UnsafeArray<const UTF8Char> txt)
{
	if (txt[0] != '+')
	{
		return false;
	}
	UTF8Char c;
	if (txt[0] == 0)
		return false;
	while ((c = *txt++) != 0)
	{
		if (c < '0' && c > '9')
			return false;
	}
	return true;
}

Bool Text::SMSUtil::IsIntlPhone(const UTF16Char *txt)
{
	if (txt[0] != '+')
	{
		return false;
	}
	UTF16Char c;
	if (txt[0] == 0)
		return false;
	while ((c = *txt++) != 0)
	{
		if (c < '0' && c > '9')
			return false;
	}
	return true;
}
