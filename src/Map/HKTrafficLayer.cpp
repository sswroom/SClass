#include "Stdafx.h"
#include "MyMemory.h"
#include "IO/FileStream.h"
#include "IO/MemoryStream.h"
#include "Map/HKTrafficLayer.h"
#include "Map/VectorLayer.h"
#include "Math/CoordinateSystemManager.h"
#include "Math/Geometry/Point.h"
#include "Net/HTTPClient.h"
#include "Net/HTTPOSClient.h"
#include "Sync/MutexUsage.h"
#include "Text/StringBuilderUTF8.h"
#include "Text/URLString.h"
#include "Text/XMLDOM.h"
//#include <stdio.h>

const Map::HKTrafficLayer::NodeInfo Map::HKTrafficLayer::nodeTable[] = {
{722, 834038.674, 816345.067},
{724, 834148.783, 816250.647},
{752, 835099.22, 815634.373},
{756, 835352.749, 815640.774},
{760, 835602.186, 815600.695},
{762, 836029.641, 815629.493},
{781, 836585.353, 815155.819},
{786, 836793.573, 815852.754},
{787, 836656.904, 815755.248},
{788, 836606.459, 815875.71},
{789, 836748.301, 815908.341},
{793, 837428.196, 816174.589},
{793, 837434.612, 816161.378},
{811, 838249.981, 817134.408},
{818, 838881.248, 817243.884},
{821, 839406.398, 817161.385},
{868, 836682.388, 815883.302},
{870, 836803.159, 815997.652},
{875, 834918.334, 815759.379},
{877, 837616.85, 816570.66},
{877, 837626.399, 816561.52},
{893, 832738.968, 816762.428},
{896, 834264.546, 816083.739},
{910, 840060.004, 816792.715},
{910, 840060.004, 816792.63},
{930, 840495.49, 816655.752},
{931, 839976.076, 816575.425},
{931, 840101.178, 816617.612},
{3006, 834913.16, 818626.797},
{3010, 835020.456, 819072.594},
{3363, 839521.209, 820694.514},
{3368, 839344.209, 820099.964},
{3369, 839269.874, 820683.627},
{3370, 839125.949, 820671.968},
{3393, 838680.921, 821720.124},
{3395, 838185.484, 821426.384},
{3402, 834754.135, 815848.947},
{3417, 837789.141, 821018.42},
{3419, 837531.387, 820885.152},
{3450, 837010.873, 818912.021},
{3453, 836694.153, 818344.939},
{3457, 836587.973, 817767.834},
{3458, 836100.641, 817358.907},
{3459, 835807.883, 817301.615},
{3460, 835579.522, 817480.928},
{3470, 834889.426, 818187.326},
{3480, 836458.317, 818948.326},
{3483, 836440.024, 819826.139},
{3484, 836273.929, 819369.685},
{3488, 836967.085, 820564.744},
{3489, 837168.318, 820663.995},
{3491, 835320.029, 818933.626},
{3498, 835269.643, 819039.869},
{3499, 835203.267, 819239.124},
{3500, 835453.715, 819296.604},
{3502, 835629.414, 819329.703},
{3503, 835971.906, 819718.872},
{3504, 836128.396, 819945.362},
{3505, 836334.997, 820230.44},
{3506, 836482.181, 819918.657},
{3615, 835632.686, 817301.908},
{3632, 842224.694, 818075.31},
{3633, 842093.024, 818642.008},
{3637, 841500.294, 818838.784},
{3639, 840935.412, 818601.61},
{3643, 839537.601, 819872.588},
{3644, 839174.133, 821171.9},
{3651, 841880.892, 817878.688},
{3664, 836446.718, 817636.666},
{3681, 837968.472, 821192.37},
{3690, 839111.955, 820458.628},
{3692, 834538.393, 818512.558},
{3715, 837030.317, 817998.638},
{4631, 836599.836, 818132.347},
{4632, 842015.881, 817960.926},
{4633, 834364.207, 818290.731},
{4640, 836269.025, 819339.592},
{4643, 836380.592, 819078.673},
{4644, 835228.606, 819561.765},
{4646, 836422.941, 820573.545},
{4647, 836609.24, 814749.535},
{4648, 835776.133, 815604.834},
{4649, 838019.353, 817012.047},
{4649, 838010.672, 817025.768},
{4650, 839919.319, 816768.747},
{4651, 836884.007, 816087.665},
{4652, 833101.677, 816778.101},
{5011, 840851.058, 816261.521},
{7861, 836714.038, 815819.064},
{7871, 836643.102, 815784.132},
{7881, 836592.753, 815897.731},
{7881, 836701.913, 815918.062},
{7882, 836603.538, 815878.324},
{7883, 836596.707, 815890.625},
{7891, 836701.913, 815918.062},
{7908, 836950.758, 815938.449},
{7909, 837000.797, 815961.774},
{7918, 837006.391, 815940.388},
{7919, 836956.857, 815917.381},
{8111, 838254.2, 817119.959},
{8182, 838886.659, 817228.946},
{8212, 839401.015, 817147.538},
{8978, 834523.708, 815916.074},
{8979, 834575.127, 815899.799},
{9101, 840052.115, 816777.46},
{30069, 834823.46, 818955.081},
{33671, 839539.341, 820612.792},
{33681, 839352.89, 820107.684},
{33691, 839284.825, 820586.955},
{33701, 839125.854, 820681.893},
{34211, 838961.948, 820481.832},
{34212, 839032.263, 820399.522},
{34213, 838795.019, 820547.703},
{34214, 838796.309, 820560.136},
{34221, 837768.505, 820483.126},
{34222, 837777.736, 820479.786},
{34371, 837346.446, 819464.44},
{34372, 837354.848, 819455.342},
{34481, 837004.89, 818935.405},
{34501, 836830.285, 818807.735},
{34502, 836989.173, 818891.055},
{34551, 836573.237, 818583.439},
{34552, 836588.377, 818563.869},
{34554, 836683.275, 818691.309},
{34781, 836398.307, 818543.592},
{34783, 836432.903, 818548.685},
{34982, 835297.849, 819038.497},
{35071, 836398.278, 820324.278},
{36511, 841899.095, 817854.503},
{36661, 836000.337, 818685.152},
{36662, 835997.232, 818679.961},
{36821, 835268.36, 819250.732},
{46312, 836633.89, 818130.091},
{46319, 836650.693, 817917.971},
{46322, 842034.07, 817933.434},
{46332, 833112.038, 816768.056},
{46332, 834395.219, 818269.104},
{46478, 836600.096, 814778.361},
{46479, 836538.931, 814955.598},
{46488, 835804.774, 815605.457},
{46495, 838048.299, 817035.81},
{46497, 837992.283, 816985.248},
{46498, 837982.489, 816997.558},
{46499, 838040.608, 817047.877},
{46502, 839931.964, 816756.4},
{46512, 836893.978, 816083.846},
{46522, 834395.219, 818269.104},
{50018, 835747.625, 815588.61},
{50019, 835803.901, 815589.008},
{50045, 833566.611, 816541.012},
{50048, 833272.432, 816617.227},
{50049, 833323.351, 816607.564},
{50058, 833814.842, 816458.312},
{50059, 833862.7, 816441.553},
{50076, 836551.318, 815844.419},
{50078, 836298.985, 815671.02},
{50079, 836349.205, 815690.862},
{50079, 836349.024, 815690.857},
{50098, 836705.363, 815357.127},
{50099, 836708.043, 815420.557},
{50106, 839816.873, 816917.947},
{50107, 839823.434, 816928.645},
{50108, 839863.478, 816886.033},
{50109, 839875.054, 816894.55},
{50119, 840850.736, 816287.253},
{50178, 836297.644, 815654.668},
{50179, 836362.957, 815673.882},
{78201, 835418.623, 817893.881},
{88801, 835232.243, 819528.557},
{88803, 836458.943, 818526.587},
{88805, 836463.722, 818544.811},
{88806, 836421.253, 820544.801},
{88807, 836418.558, 820503.762},
{88810, 839314.866, 820127.978},
{88812, 836747.719, 818732.879},
{88813, 839988.562, 819731.898},
{88814, 841123.667, 818587.958},
{88816, 837353.75, 820779.14},
{88817, 839074.865, 821794.406},
{88818, 836976.843, 818412.791},
{88819, 835948.908, 817311.201},
{88820, 835350.224, 818078.55},
{88821, 837650.4, 820182.864},
{88822, 835098.871, 819181.09},
{88824, 837662.065, 820185.169},
{88825, 836306.663, 819564.477},
{88827, 836712.602, 818694.748},
{888131, 840039.042, 819687.873},
{888141, 841171.818, 818619.044},
{888151, 842053.671, 818696.967},
{888161, 837403.608, 820809.184},
{888171, 839124.326, 821765.411},
{888181, 837009.054, 818365.583},
{888191, 835889.633, 817306.075},
{888201, 835346.075, 818138.176},
{888211, 837668.17, 820248.692},
{888221, 835058.429, 819127.715},
{888231, 836009.355, 819775.102},
{888241, 837675.498, 820244.302},
{888301, 834711.437, 818893.39},
{888302, 836661.066, 818660.839},
{888303, 836748.998, 818560.257},
{991001, 839366.623044863, 831956.751005737},
{991002, 839779.594163889, 831665.841646526},
{991003, 840045.598474666, 830856.59481517},
{991003, 840049.354169132, 830876.239019383},
{991004, 839626.644699366, 829640.663742941},
{991005, 839405.757049565, 829500.765177485},
{991006, 840070.565070917, 830019.778373923},
{991007, 840490.186657408, 829644.729620939},
{991008, 839952.652471364, 828933.468082635},
{991009, 839637.93036073, 828139.057859749},
{991010, 839740.361480281, 827835.464139735},
{991011, 839804.998195066, 827644.975889156},
{991012, 839711.673962594, 826746.886929059},
{991013, 839807.102717936, 826543.711499592},
{991013, 839793.349536438, 826558.231282638},
{991014, 839039.133362919, 822354.785063347},
{991015, 839111.081344018, 829209.248342628},
{991016, 838796.486809547, 828696.986176243},
{991017, 838612.260074207, 828386.456444638},
{991018, 837938.763799409, 827712.254917527},
{991019, 837594.601469069, 827298.425779635},
{991020, 837263.760033631, 826834.575151077},
{991021, 838517.598074747, 828032.857157856},
{991022, 838801.869811469, 827158.258895313},
{991023, 838722.784345672, 826856.62271666},
{991024, 838054.334624657, 826093.523370042},
{991025, 838242.755922295, 826686.785856897},
{991026, 837659.793625128, 827198.701464249},
{991027, 839415.335579623, 826793.735632397},
{991028, 838945.83336667, 826497.51465733},
{991029, 838942.761558969, 826506.054222263},
{991030, 836656.66039024, 825230.94410684},
{991031, 836206.704101352, 825612.940132471},
{991032, 837360.847897282, 826311.053554285},
{991032, 837348.825482599, 826327.036718715},
{991033, 837474.479817951, 825673.934707342},
{991034, 837199.742269456, 825298.875487281},
{991034, 837214.850475371, 825311.980528831},
{991035, 836829.438831019, 825077.926382666},
{991036, 836598.427492881, 824923.078413898},
{991036, 836612.247470921, 824937.531702414},
{991037, 836183.617849135, 824539.716079067},
{991038, 835900.184270822, 824326.932814028},
{991038, 835912.939474894, 824342.288906872},
{991039, 836744.469652409, 823024.509970058},
{991040, 836391.983927667, 826415.07038164},
{991041, 836062.474854619, 825884.528900411},
{991042, 835690.253184071, 825325.825016182},
{991043, 832952.40883561, 822740.989751551},
{991044, 836277.208237948, 826776.030885218},
{991045, 835424.401038172, 826885.794874338},
{991046, 835265.378058023, 826845.130310494},
{991047, 832387.560675293, 826824.745970229},
{991048, 823591.609390118, 836073.402706884},
{991049, 823185.573195455, 834931.438529471},
{991049, 823196.138182797, 834948.420274975},
{991050, 823176.855572557, 834937.501997901},
{991050, 823188.368326069, 834953.855847474},
{991051, 823142.596654175, 834110.260201026},
{991052, 823678.3260291, 833427.32584597},
{991053, 824251.147742465, 832940.751272578},
{991053, 824237.744976354, 832955.595361099},
{991054, 824679.39044001, 831538.938472044},
{991054, 824679.223737358, 831558.936081408},
{991055, 824477.560826782, 830423.941536224},
{991055, 824486.841371545, 830441.657954849},
{991056, 825177.405159764, 826130.742616866},
{991056, 825161.502337023, 826142.871105179},
{991057, 822969.5934159, 834398.412200861},
{991058, 822177.004362522, 834112.839810608},
{991059, 821747.357408323, 832993.318170758},
{991059, 821762.153931185, 833006.774132678},
{991060, 820906.725216466, 832776.824581299},
{991061, 819759.523186599, 833094.234677438},
{991062, 818886.844670693, 833053.807525082},
{991063, 818300.159161367, 832427.96480957},
{991064, 817587.516525641, 831555.598544495},
{991065, 816688.311204557, 830696.815364743},
{991066, 815971.784984641, 830346.792636681},
{991067, 815710.365667995, 829102.023135973},
{991068, 815651.582430499, 828415.628868492},
{991068, 815646.501109774, 828434.972605975},
{991069, 815782.981712505, 827913.577054832},
{991069, 815778.031811287, 827932.954837935},
{991070, 816142.848473652, 827019.317841701},
{991070, 816129.543842872, 827034.250584241},
{991071, 817132.508107047, 826244.798046764},
{991071, 817113.306270667, 826239.230655409},
{991072, 817870.039949115, 825971.12137893},
{991072, 817860.258561715, 825988.564966692},
{991073, 818750.546934392, 825367.654825058},
{991073, 818731.112754087, 825372.359634714},
{991074, 819521.688152044, 825022.289755501},
{991075, 820021.159404672, 824374.316687116},
{991076, 820857.498634776, 824107.288139025},
{991077, 822037.087689525, 824797.723611996},
{991077, 822020.482845557, 824786.575555803},
{991078, 823601.491997064, 825304.631060764},
{991079, 824838.839498699, 825275.216861146},
{991080, 825808.228119593, 825842.511629153},
{991080, 825788.322200358, 825840.848720441},
{991081, 826812.618367501, 825618.237092886},
{991082, 827721.641819793, 825681.845557764},
{991082, 827706.360595945, 825694.747634364},
{991083, 829084.545943117, 825872.65402122},
{991084, 815811.207070332, 828287.657732332},
{991085, 816102.5847199, 827379.67077338},
{991086, 816250.857617213, 826554.379068425},
{991086, 816231.148109846, 826557.749929436},
{991087, 817307.725831838, 826004.505734127},
{991087, 817294.642100348, 826019.606914382},
{991088, 818090.526197656, 825405.41613715},
{991089, 819074.910638435, 825257.577289054},
{991090, 820117.549478946, 824203.747504892},
{991090, 820099.256105794, 824211.827361222},
{991091, 821377.45654578, 824145.036880011},
{991092, 822389.620000243, 824619.842725638},
{991093, 823970.780684081, 825184.285902405},
{991094, 824263.792084439, 825402.543754432},
{991095, 825218.082339644, 825053.818329401},
{991096, 826300.373722816, 825714.756875435},
{991097, 827332.074373934, 825377.902899312},
{991097, 827312.098783766, 825378.89072389},
{991098, 828293.999143549, 825553.054606941},
{992001, 839383.229700239, 831945.605648085},
{992002, 839747.829391914, 831690.118931841},
{992003, 839764.080481072, 831678.464072818},
{992004, 839795.173603126, 831653.306798799},
{992005, 840049.354169132, 830876.239019383},
{992005, 840053.024773921, 830895.899300672},
{992006, 840045.598474666, 830856.59481517},
{992006, 840053.024773921, 830895.899300672},
{992007, 840041.981756651, 830836.92454952},
{992008, 839660.623097816, 829661.762448272},
{992009, 839643.691299731, 829651.123829756},
{992010, 839609.108038615, 829631.047843093},
{992011, 839438.146952911, 829524.236312121},
{992012, 839421.952001238, 829512.500744803},
{992013, 839389.836519524, 829488.659942126},
{992014, 840041.789291223, 830047.547519233},
{992015, 840056.011778509, 830033.497035665},
{992016, 840085.34991843, 830006.312413257},
{992017, 840461.950063827, 829673.027441384},
{992018, 840476.470783724, 829659.283245109},
{992019, 840502.670870792, 829629.144567639},
{992020, 839979.073035981, 828963.500627745},
{992021, 839965.862753673, 828948.484355191},
{992022, 839939.984730917, 828917.991379095},
{992023, 839635.905778267, 828178.992725903},
{992024, 839636.687075524, 828159.009114629},
{992025, 839639.919876071, 828119.157664608},
{992026, 839723.508427814, 827871.739914468},
{992027, 839731.841154009, 827853.558449341},
{992028, 839748.520553921, 827817.204087229},
{992029, 839798.231696715, 827684.382377081},
{992030, 839801.937915083, 827664.740369579},
{992031, 839806.803680932, 827625.057550348},
{992032, 839708.114777061, 826786.717754465},
{992033, 839709.49937841, 826766.768357171},
{992034, 839714.466007357, 826727.082775807},
{992035, 839793.349536438, 826558.231282638},
{992035, 839779.459254205, 826572.620864267},
{992036, 839807.102717936, 826543.711499592},
{992036, 839779.459254205, 826572.620864267},
{992037, 839821.522412078, 826529.852480112},
{992038, 839057.338021277, 822390.380273506},
{992039, 839047.911103906, 822372.743086105},
{992040, 839136.071977912, 829240.480224909},
{992041, 839123.544498748, 829224.890266234},
{992042, 839098.924562048, 829193.367138261},
{992043, 838816.971864133, 828731.342216622},
{992044, 838806.79727789, 828714.123686057},
{992045, 838785.950037204, 828679.986869536},
{992046, 838631.66158981, 828421.430144627},
{992047, 838621.875193381, 828403.988352064},
{992048, 838603.350662746, 828368.550513012},
{992049, 837967.653498103, 827739.920515468},
{992050, 837953.208648764, 827726.08771649},
{992051, 837924.318913957, 827698.422156261},
{992052, 837617.542189463, 827331.19349771},
{992053, 837606.071829271, 827314.80963867},
{992054, 837582.650437398, 827282.389170205},
{992055, 837284.51878842, 826868.759818396},
{992056, 837274.017548759, 826851.738538608},
{992057, 837254.11954062, 826817.051997976},
{992058, 838522.873128646, 828072.482611157},
{992059, 838519.681485141, 828052.740432659},
{992060, 838517.073464029, 828012.867498856},
{992061, 838811.986446183, 827196.958426347},
{992062, 838806.928128825, 827177.60866083},
{992063, 838797.015119899, 827138.857040508},
{992064, 838734.960275537, 826894.722080611},
{992065, 838729.07727166, 826875.606896454},
{992066, 838716.550637977, 826837.619009431},
{992067, 838092.898993979, 826104.13900621},
{992068, 838073.586414014, 826098.94244488},
{992069, 838035.007016633, 826088.382782742},
{992070, 838276.09777012, 826664.701355623},
{992071, 838259.213791946, 826675.421956399},
{992072, 838226.71326133, 826698.715219835},
{992073, 837690.698094068, 827173.349597914},
{992074, 837675.714090772, 827186.59614419},
{992075, 837644.851473812, 827211.995527361},
{992076, 839448.079009453, 826816.710752061},
{992077, 839431.722260733, 826805.201765517},
{992078, 839398.881696352, 826782.365947912},
{992079, 838983.740780582, 826510.271482486},
{992080, 838981.179356882, 826517.170287097},
{992081, 838964.857700765, 826503.685128318},
{992082, 838962.0514835, 826511.334356256},
{992083, 838926.566205394, 826492.150284447},
{992084, 838923.394972402, 826501.086407822},
{992085, 836656.079916268, 825210.977821605},
{992086, 836659.28147911, 825250.768935801},
{992087, 836662.390228663, 825270.525081843},
{992088, 836236.746953425, 825639.195317376},
{992089, 836220.884474074, 825627.043927331},
{992090, 836192.269534186, 825599.096604351},
{992091, 837337.362181147, 826343.425517321},
{992092, 837360.847897282, 826311.053554285},
{992092, 837348.825482599, 826327.036718715},
{992093, 837373.046749565, 826295.204713805},
{992094, 837491.572314112, 825684.008469595},
{992094, 837506.453246734, 825697.347496783},
{992095, 837502.11869888, 825702.83923026},
{992096, 837491.572314112, 825684.008469595},
{992096, 837506.453246734, 825697.347496783},
{992097, 837488.472103596, 825688.225121697},
{992098, 837459.00366463, 825661.290231697},
{992099, 837214.850475371, 825311.980528831},
{992099, 837229.94903378, 825325.096684286},
{992100, 837199.742269456, 825298.875487281},
{992100, 837229.94903378, 825325.096684286},
{992101, 837184.622155965, 825285.784186045},
{992102, 836864.847910203, 825096.526164811},
{992103, 836847.087360209, 825087.33253278},
{992104, 836818.47684727, 825061.229340117},
{992105, 836811.854452684, 825068.398174373},
{992106, 836612.247470921, 824937.531702414},
{992106, 836627.046973157, 824950.959312031},
{992107, 836598.427492881, 824923.078413898},
{992107, 836627.046973157, 824950.959312031},
{992108, 836585.424967088, 824907.881890511},
{992109, 836210.878540591, 824568.987915503},
{992110, 836197.210629954, 824554.386949135},
{992111, 836170.017020475, 824525.053266333},
{992112, 835912.939474894, 824342.288906872},
{992112, 835928.386763323, 824354.978547772},
{992113, 835900.184270822, 824326.932814028},
{992113, 835928.386763323, 824354.978547772},
{992114, 835890.046705722, 824309.763987673},
{992115, 836740.373400974, 823038.766098665},
{992115, 836738.551534257, 823043.63649923},
{992116, 836746.321922089, 823004.63116497},
{992116, 836744.469652409, 823024.509970058},
{992117, 836429.643322445, 826428.552591598},
{992118, 836410.813625055, 826421.811486619},
{992119, 836373.052245705, 826408.621240765},
{992120, 836076.421484177, 825922.015079509},
{992121, 836069.602721279, 825903.21336489},
{992122, 836055.108539366, 825865.934885258},
{992123, 835720.803149784, 825351.645542806},
{992124, 835705.528166927, 825338.735279495},
{992125, 835674.511282257, 825313.492976375},
{992126, 832980.847921502, 822769.10882818},
{992127, 832966.479413955, 822755.203084202},
{992128, 836305.591107584, 826747.845557274},
{992129, 836291.399672766, 826761.93822125},
{992130, 836262.983164297, 826790.088459615},
{992131, 835463.077217552, 826895.996038532},
{992132, 835443.772485873, 826890.769380447},
{992133, 835404.966214365, 826881.073897364},
{992134, 835304.150557129, 826854.963210575},
{992135, 835284.755722624, 826850.080675595},
{992136, 835246.014443154, 826840.125547215},
{992137, 832416.331671003, 826796.956947111},
{992138, 832401.946173148, 826810.851458671},
{992139, 823587.30909647, 836053.87049056},
{992140, 823196.138182797, 834948.420274975},
{992140, 823206.885042616, 834965.286175627},
{992141, 823188.368326069, 834953.855847474},
{992141, 823225.075431696, 834996.549870227},
{992142, 823185.573195455, 834931.438529471},
{992142, 823206.885042616, 834965.286175627},
{992143, 823176.855572557, 834937.501997901},
{992143, 823201.407119662, 834969.02126411},
{992144, 823175.85121805, 834913.960453052},
{992145, 823165.675784699, 834920.923330508},
{992146, 823128.759583232, 834147.790661562},
{992147, 823135.678118718, 834129.025431298},
{992148, 823149.620243412, 834091.534037665},
{992149, 823647.791961105, 833453.164070537},
{992150, 823663.046593709, 833440.229986835},
{992151, 823693.843650723, 833414.708262241},
{992152, 824237.744976354, 832955.595361099},
{992152, 824224.50600021, 832970.58433271},
{992153, 824251.147742465, 832940.751272578},
{992153, 824224.50600021, 832970.58433271},
{992154, 824264.164936279, 832925.567311792},
{992155, 824679.22373991, 831558.936120305},
{992155, 824678.542830768, 831578.924526015},
{992156, 824679.39044001, 831538.938472044},
{992156, 824678.542830768, 831578.924526015},
{992157, 824679.207418014, 831518.939309489},
{992158, 824486.841371545, 830441.657954849},
{992158, 824495.632403794, 830459.622189336},
{992159, 824477.560826782, 830423.941536224},
{992159, 824495.632403794, 830459.622189336},
{992160, 824467.849653403, 830406.457454562},
{992161, 825161.502337023, 826142.871105179},
{992161, 825145.490969219, 826154.855933137},
{992162, 825177.405159764, 826130.742616866},
{992162, 825145.490969219, 826154.855933137},
{992163, 825193.275966109, 826118.572263297},
{992164, 823004.749401092, 834417.296102058},
{992165, 822987.647837073, 834406.9401359},
{992166, 822950.964669109, 834391.187122662},
{992167, 822196.834582747, 834147.522633094},
{992168, 822186.226573498, 834130.58401541},
{992169, 822168.467242272, 834094.756397117},
{992170, 821762.153931185, 833006.774132678},
{992170, 821776.818501032, 833020.373779409},
{992171, 821747.357408323, 832993.318170758},
{992171, 821776.818501032, 833020.373779409},
{992172, 821732.560521408, 832979.862609169},
{992173, 820946.018834069, 832769.345819358},
{992174, 820926.391077386, 832773.186544236},
{992175, 820887.066356833, 832780.502792545},
{992176, 819794.90566014, 833075.577760061},
{992177, 819777.21442337, 833084.906218749},
{992178, 819741.388267365, 833102.663364094},
{992179, 818924.728851535, 833066.64281323},
{992180, 818905.784316801, 833060.23323752},
{992181, 818867.904156348, 833047.384370387},
{992182, 818313.052731238, 832465.829216911},
{992183, 818306.69990337, 832446.864998549},
{992184, 818293.611003089, 832409.067147724},
{992185, 817619.739037489, 831579.292112837},
{992186, 817603.492881059, 831567.628368897},
{992187, 817571.678050178, 831543.390127331},
{992188, 816727.789913543, 830703.222955998},
{992189, 816708.09956762, 830699.7172068},
{992190, 816668.469624524, 830694.303054707},
{992191, 815982.268899593, 830385.39409077},
{992192, 815977.008939508, 830366.098186705},
{992193, 815966.490132652, 830327.506843984},
{992194, 815717.875987899, 829141.307102172},
{992195, 815714.094516453, 829121.669902941},
{992196, 815706.598738004, 829082.381863356},
{992197, 815646.501109774, 828434.972605975},
{992197, 815641.982368891, 828454.455444084},
{992198, 815651.582430499, 828415.628868492},
{992198, 815641.982368891, 828454.455444084},
{992199, 815656.634643073, 828396.277508127},
{992200, 815778.031811287, 827932.954837935},
{992200, 815773.082758517, 827952.332837744},
{992201, 815782.981712505, 827913.577054832},
{992201, 815773.082758517, 827952.332837744},
{992202, 815788.009359534, 827894.219297593},
{992203, 816129.543842872, 827034.250584241},
{992203, 816116.46234709, 827049.379181935},
{992204, 816142.848473652, 827019.317841701},
{992204, 816116.46234709, 827049.379181935},
{992205, 816156.045577766, 827004.289986132},
{992206, 817113.306270667, 826239.230655409},
{992206, 817093.898176044, 826234.401002161},
{992207, 817132.508107047, 826244.798046764},
{992207, 817093.898176044, 826234.401002161},
{992208, 817151.615894122, 826250.704875967},
{992209, 817860.258561715, 825988.564966692},
{992209, 817850.969482531, 826005.763111958},
{992210, 817870.039949115, 825971.12137893},
{992210, 817850.969482531, 826005.763111958},
{992211, 817879.396145785, 825953.444796007},
{992212, 818731.112754087, 825372.359634714},
{992212, 818711.411996483, 825375.748064686},
{992213, 818750.546934392, 825367.654825058},
{992213, 818711.411996483, 825375.748064686},
{992214, 818769.620327535, 825361.639245892},
{992215, 819501.249556608, 825056.673185389},
{992216, 819511.507421496, 825039.504506448},
{992217, 819531.73640149, 825004.997210555},
{992218, 819995.519877321, 824405.01652725},
{992219, 820008.198923055, 824389.549084051},
{992220, 820035.658672032, 824360.540938644},
{992221, 820817.587639093, 824104.703486614},
{992222, 820837.564374777, 824105.66786796},
{992223, 820877.418004759, 824109.082212463},
{992224, 822020.482845557, 824786.575555803},
{992224, 822003.878001591, 824775.427499613},
{992225, 822037.087689525, 824797.723611996},
{992225, 822003.878001591, 824775.427499613},
{992226, 822053.683400466, 824808.885259647},
{992227, 823563.603414988, 825291.838429496},
{992228, 823582.429551847, 825298.589226777},
{992229, 823620.696667694, 825310.197873121},
{992230, 824804.885568638, 825296.30647883},
{992231, 824821.700727872, 825285.478303827},
{992232, 824856.681190887, 825266.179493174},
{992233, 825788.322200358, 825840.848720441},
{992233, 825768.659712731, 825837.205647519},
{992234, 825808.228119593, 825842.511629153},
{992234, 825768.659712731, 825837.205647519},
{992235, 825828.203853068, 825841.963783247},
{992236, 826774.482022242, 825630.303848455},
{992237, 826793.536898647, 825624.228549011},
{992238, 826831.69983635, 825612.245636769},
{992239, 827706.360595945, 825694.747634364},
{992239, 827690.820724809, 825707.337001055},
{992240, 827721.641819793, 825681.845557764},
{992240, 827690.820724809, 825707.337001055},
{992241, 827736.957358073, 825668.984814815},
{992242, 829056.457067319, 825901.132347303},
{992243, 829070.501505218, 825886.893184261},
{992244, 815795.010288785, 828324.223718464},
{992245, 815802.933799651, 828305.864442306},
{992246, 815819.746850218, 828269.572595906},
{992247, 816103.79042207, 827399.628001707},
{992248, 816099.925386697, 827359.849190872},
{992249, 816096.128099245, 827340.22232365},
{992250, 816231.148109846, 826557.749929436},
{992250, 816211.614256113, 826562.042779114},
{992251, 816250.857617213, 826554.379068425},
{992251, 816211.614256113, 826562.042779114},
{992252, 816270.712367521, 826551.973063933},
{992253, 817307.725831838, 826004.505734127},
{992253, 817294.642100348, 826019.606914382},
{992254, 817318.902307304, 825987.925899031},
{992255, 817329.52458867, 825970.979892464},
{992256, 818055.338377422, 825424.413857797},
{992257, 818073.061829806, 825415.146753408},
{992258, 818107.460736226, 825394.785798894},
{992259, 819035.136761282, 825261.818248542},
{992260, 819055.032184713, 825259.775670161},
{992260, 819055.032184713, 825259.775670161},
{992261, 819094.79388892, 825255.422585571},
{992262, 820099.256105794, 824211.827361222},
{992262, 820081.136919563, 824220.262887608},
{992263, 820117.549478946, 824203.747504892},
{992263, 820081.136919563, 824220.262887608},
{992264, 820136.107878171, 824196.291985407},
{992265, 821339.745331618, 824131.714570569},
{992266, 821358.66164199, 824138.204493681},
{992267, 821396.131573745, 824152.195303807},
{992268, 822353.451218097, 824602.760506889},
{992269, 822371.520557506, 824611.333317956},
{992270, 822407.86362394, 824628.035453696},
{992271, 823935.181223739, 825166.100279314},
{992272, 823953.190428945, 825174.786965989},
{992273, 823988.13255955, 825194.230708444},
{992274, 824225.820128154, 825390.737429947},
{992275, 824244.225350563, 825398.446021097},
{992276, 824283.602365974, 825405.291980315},
{992277, 825187.85944074, 825027.616007911},
{992278, 825202.954857239, 825040.735543922},
{992279, 825233.374251436, 825066.701901011},
{992280, 826261.213295552, 825707.007356798},
{992281, 826280.576766883, 825712.010660993},
{992282, 826320.330060435, 825715.375229562},
{992283, 827312.098783766, 825378.89072389},
{992283, 827292.123946647, 825379.893660635},
{992284, 827332.074373934, 825377.902899312},
{992284, 827292.123946647, 825379.893660635},
{992285, 827352.055875398, 825377.042899735},
{992286, 828293.999143549, 825553.054606941},
{992286, 828277.983458591, 825541.076139014},
{992287, 828309.570733703, 825565.605001315},
{992287, 828277.983458591, 825541.076139014},
{993001, 839961.561653314, 830412.772662817},
{993002, 839798.843931055, 827487.559493246},
{993003, 840012.126778543, 826325.799689876},
{993004, 839119.368379212, 822498.999189081},
{993005, 838574.596803507, 828292.442545159},
{993006, 837418.869851835, 827055.226395316},
{993007, 837237.916498667, 826786.948406227},
{993008, 837226.514034634, 826756.858570579},
{993009, 837825.349194535, 827049.690968299},
{993010, 839027.992543366, 826533.941435657},
{993011, 838342.143122025, 826187.360851338},
{993012, 836464.506655858, 825769.518986855},
{993013, 835731.710387411, 825360.622812599},
{993014, 836370.195110646, 824731.278792545},
{993015, 835894.234871953, 824187.343752772},
{993016, 836740.373400974, 823038.766098665},
{993016, 836738.551534257, 823043.63649923},
{993017, 834821.964903687, 824311.300895324},
{993018, 833257.778036683, 823023.992106097},
{993019, 835129.914223433, 826809.333864953},
{993020, 832576.323821948, 826629.136998756},
{993021, 823225.075431696, 834996.549870227},
{993021, 823201.407119662, 834969.02126411},
{993022, 824236.85948905, 829891.42738862},
{993023, 824992.717253211, 826271.213800309},
{993024, 825667.916097498, 825795.644568102},
{993025, 815628.786359997, 828637.377732141},
{993026, 828232.358585403, 825962.975994093}
};

const Map::HKTrafficLayer::NodeInfo *Map::HKTrafficLayer::GetNodeInfo(Int32 nodeId)
{
	OSInt i = 0;
	OSInt j = (sizeof(nodeTable) / sizeof(nodeTable[0])) - 1;
	OSInt k;
	OSInt l;
	while (i <= j)
	{
		k = (i + j) >> 1;
		l = nodeTable[k].id;
		if (nodeId > l)
		{
			i = k + 1;
		}
		else if (nodeId < l)
		{
			j = k - 1;
		}
		else
		{
			return &nodeTable[k];
		}
	}
	return 0;
}

void Map::HKTrafficLayer::SetSpeedMap(Int32 fromId, Int32 toId, SaturationLevel lev, Int32 trafficSpeed)
{
	const NodeInfo *fromNode = GetNodeInfo(fromId);
	const NodeInfo *toNode = GetNodeInfo(toId);
	if (fromNode == 0 || toNode == 0)
	{
		return;
	}
	Int64 id = (((Int64)fromId) << 32) | (UInt32)toId;
	RoadInfo *road;

	Sync::MutexUsage mutUsage(&this->roadMut);
	road = this->roadMap.Get(id);
	if (road == 0)
	{
		road = MemAlloc(RoadInfo, 1);
		road->objId = id;
		road->fromId = fromId;
		road->toId = toId;
		road->vec = 0;
		road->lev = lev;
		road->spd = trafficSpeed;
		this->roadMap.Put(id, road);

		CenterlineInfo *lineInfo = this->vecMap.Get(id);
		if (lineInfo)
		{
			road->vec = lineInfo->pl->Clone();
			Math::RectAreaDbl bounds;
			road->vec->GetBounds(&bounds);
			road->minX = bounds.tl.x;
			road->minY = bounds.tl.y;
			road->maxX = bounds.br.x;
			road->maxY = bounds.br.y;
		}
		else
		{
			road->minX = 0;
			road->minY = 0;
			road->maxX = 0;
			road->maxY = 0;
		}
	}
	else
	{
		road->lev = lev;
		road->spd = trafficSpeed;
	}
	mutUsage.EndUse();
}

IO::Stream *Map::HKTrafficLayer::OpenURLStream()
{
	if (this->url->StartsWithICase(UTF8STRC("FILE:///")))
	{
		IO::FileStream *fs;
		UTF8Char sbuff[512];
		UTF8Char *sptr;
		sptr = Text::URLString::GetURLFilePath(sbuff, this->url->v, this->url->leng);
		NEW_CLASS(fs, IO::FileStream(CSTRP(sbuff, sptr), IO::FileMode::ReadOnly, IO::FileShare::DenyAll, IO::FileStream::BufferType::Normal));
		if (!fs->IsError())
		{
			return fs;
		}
		DEL_CLASS(fs);
		return 0;
	}
	else
	{
		Int32 status;
		Net::HTTPClient *cli;
		cli = Net::HTTPClient::CreateConnect(this->sockf, this->ssl, this->url->ToCString(), Net::WebUtil::RequestMethod::HTTP_GET, true);
		while (true)
		{
			status = cli->GetRespStatus();
			if (status == 301 || status == 302)
			{
				Text::StringBuilderUTF8 sb;
				cli->GetRespHeader(CSTR("Location"), &sb);
				DEL_CLASS(cli);
				if (!this->url->Equals(sb.ToString(), sb.GetLength()))
				{
					SDEL_STRING(this->url);
					this->url = Text::String::New(sb.ToString(), sb.GetLength());
					return this->OpenURLStream();
				}
				else
				{
					return 0;
				}
			}
			else
			{
				break;
			}
		}

		if (status == 200)
		{
			return cli;
		}
		DEL_CLASS(cli);
		return 0;
	}
}

Map::HKTrafficLayer::HKTrafficLayer(Net::SocketFactory *sockf, Net::SSLEngine *ssl, Text::EncodingFactory *encFact) : Map::IMapDrawLayer(CSTR("HKTraffic"), 0, CSTR("HKTraffic"))
{
	this->sockf = sockf;
	this->ssl = ssl;
	this->encFact = encFact;
	this->minX = 0;
	this->minY = 0;
	this->maxX = 0;
	this->maxY = 0;
	this->url = Text::String::New(UTF8STRC("https://resource.data.one.gov.hk/td/speedmap.xml"));
	
	this->SetCoordinateSystem(Math::CoordinateSystemManager::CreateProjCoordinateSystemDefName(Math::CoordinateSystemManager::PCST_HK80));
}

Map::HKTrafficLayer::~HKTrafficLayer()
{
	UOSInt i;
	const Data::ArrayList<RoadInfo*> *roadList;
	RoadInfo *road;

	roadList = this->roadMap.GetValues();
	i = roadList->GetCount();
	while (i-- > 0)
	{
		road = roadList->GetItem(i);
		if (road->vec)
		{
			DEL_CLASS(road->vec);
		}
		MemFree(road);
	}

	const Data::ArrayList<CenterlineInfo*> *lineList;
	CenterlineInfo *lineInfo;
	lineList = this->vecMap.GetValues();
	i = lineList->GetCount();
	while (i-- > 0)
	{
		lineInfo = lineList->GetItem(i);
		DEL_CLASS(lineInfo->pl);
		MemFree(lineInfo);
	}
	this->url->Release();
}

void Map::HKTrafficLayer::SetURL(Text::String *url)
{
	this->url->Release();
	this->url = url->Clone();
}

Bool Map::HKTrafficLayer::AddRoadLayer(Map::IMapDrawLayer *roadLayer)
{
	Data::ArrayListInt64 idArr;
	UTF8Char sbuff[512];
	UTF8Char *sarr[3];
	UOSInt colCnt;
	UOSInt i;
	UOSInt j;
	UOSInt idCol = (UOSInt)-1;
	Int32 fromId;
	Int32 toId;
	Int64 id;
	CenterlineInfo *lineInfo;
	Bool isFirst = false;
	Math::RectAreaDbl minMax;
	void *nameArr;
	if (this->minX == 0 && this->minY == 0)
	{
		isFirst = true;
	}
	void *sess = roadLayer->BeginGetObject();
	roadLayer->GetAllObjectIds(&idArr, &nameArr);
	colCnt = roadLayer->GetColumnCnt();
	i = 0;
	while (i < colCnt)
	{
		if (roadLayer->GetColumnName(sbuff, i))
		{
			if (Text::StrEquals(sbuff, (const UTF8Char*)"LINK"))
			{
				idCol = i;
			}
		}
		i++;
	}
	if (idCol != (UOSInt)-1)
	{
		i = 0;
		j = idArr.GetCount();
		while (i < j)
		{
			if (roadLayer->GetString(sbuff, sizeof(sbuff), nameArr, idArr.GetItem(i), idCol))
			{
				if (Text::StrSplitTrim(sarr, 3, sbuff, '-') == 2)
				{
					fromId = Text::StrToInt32(sarr[0]);
					toId = Text::StrToInt32(sarr[1]);
				}
				else
				{
					fromId = 0;
					toId = 0;
				}
				if (fromId != 0 && toId != 0)
				{
					id = (((Int64)fromId) << 32) | (UInt32)toId;
					Math::Geometry::Vector2D *vec = roadLayer->GetNewVectorById(sess, idArr.GetItem(i));
					if (vec)
					{
						if (vec->GetVectorType() == Math::Geometry::Vector2D::VectorType::Polyline)
						{
							vec->GetBounds(&minMax);
							if (isFirst)
							{
								isFirst = false;
								this->minX = minX;
								this->minY = minY;
								this->maxX = maxX;
								this->maxY = maxY;
							}
							else
							{
								if (minX < this->minX)
									this->minX = minX;
								if (minY < this->minY)
									this->minY = minY;
								if (maxX > this->maxX)
									this->maxX = maxX;
								if (maxY > this->maxY)
									this->maxY = maxY;
							}

							lineInfo = MemAlloc(CenterlineInfo, 1);
							lineInfo->fromId = fromId;
							lineInfo->toId = toId;
							lineInfo->pl = (Math::Geometry::Polyline*)vec;
							lineInfo = this->vecMap.Put(id, lineInfo);
							if (lineInfo)
							{
								DEL_CLASS(lineInfo->pl);
								MemFree(lineInfo);
							}
						}
						else
						{
							DEL_CLASS(vec);
						}
					}
				}
			}
			i++;
		}
	}
	roadLayer->ReleaseNameArr(nameArr);
	roadLayer->EndGetObject(sess);
	DEL_CLASS(roadLayer);
	return true;
}

void Map::HKTrafficLayer::EndInit()
{
	this->ReloadData();
}

void Map::HKTrafficLayer::ReloadData()
{
	UInt8 buff[2048];
	UOSInt readSize;
	IO::Stream *stm;
//	printf("Reloading traffic data...");
	stm = this->OpenURLStream();
	if (stm)
	{
		IO::MemoryStream mstm(UTF8STRC("Map.HKTrafficLayer.ReloadData.mstm"));
		while (true)
		{
			readSize = stm->Read(buff, 2048);
			if (readSize <= 0)
				break;
			mstm.Write(buff, readSize);
		}
		const UInt8 *xmlBuff = mstm.GetBuff(&readSize);
		Text::XMLNode *node1;
		Text::XMLNode *node2;
		Text::XMLNode *node3;
		Text::XMLDocument doc;
//		printf(".");
		if (doc.ParseBuff(this->encFact, xmlBuff, readSize))
		{
//			printf("success\r\n");
			UOSInt i = 0;
			UOSInt j = doc.GetChildCnt();
			UOSInt k;
			Text::StringBuilderUTF8 sb;
			UTF8Char *sarr[2];
			while (i < j)
			{
				node1 = doc.GetChild(i);
				if (node1->GetNodeType() == Text::XMLNode::NodeType::Element && node1->name->EqualsICase(UTF8STRC("jtis_speedlist")))
				{
					i = 0;
					j = node1->GetChildCnt();
					while (i < j)
					{
						node2 = node1->GetChild(i);
						if (node2->GetNodeType() == Text::XMLNode::NodeType::Element && node2->name->EqualsICase(UTF8STRC("jtis_speedmap")))
						{
							Int32 fromId = 0;
							Int32 toId = 0;
							Int32 spd = -1;
							SaturationLevel lev = SL_BAD;

							k = node2->GetChildCnt();
							while (k-- > 0)
							{
								node3 = node2->GetChild(k);
								if (node3->GetNodeType() == Text::XMLNode::NodeType::Element && node3->name->EqualsICase(UTF8STRC("LINK_ID")))
								{
									sb.ClearStr();
									node3->GetInnerText(&sb);
									if (Text::StrSplit(sarr, 2, sb.v, '-') == 2)
									{
										fromId = Text::StrToInt32(sarr[0]);
										toId = Text::StrToInt32(sarr[1]);
									}
								}
								else if (node3->GetNodeType() == Text::XMLNode::NodeType::Element && node3->name->EqualsICase(UTF8STRC("ROAD_SATURATION_LEVEL")))
								{
									sb.ClearStr();
									node3->GetInnerText(&sb);
									if (sb.EqualsICase(UTF8STRC("TRAFFIC GOOD")))
									{
										lev = SL_GOOD;
									}
									else if (sb.EqualsICase(UTF8STRC("TRAFFIC AVERAGE")))
									{
										lev = SL_AVERAGE;
									}
									else if (sb.EqualsICase(UTF8STRC("TRAFFIC BAD")))
									{
										lev = SL_BAD;
									}
								}
								else if (node3->GetNodeType() == Text::XMLNode::NodeType::Element && node3->name->EqualsICase(UTF8STRC("TRAFFIC_SPEED")))
								{
									sb.ClearStr();
									node3->GetInnerText(&sb);
									sb.ToInt32(&spd);
								}

							}
							if (fromId != 0 && toId != 0 && spd != -1)
							{
								SetSpeedMap(fromId, toId, lev, spd);
							}
						}
						i++;
					}
					break;
				}
				i++;
			}
		}
		else
		{
//			printf("failed\r\n");
		}
		DEL_CLASS(stm);
	}
	else
	{
//		printf("failed\r\n");
//		printf("URL=%s\r\n", this->url);
	}
}

Map::DrawLayerType Map::HKTrafficLayer::GetLayerType()
{
	return Map::DRAW_LAYER_POLYLINE;
}

UOSInt Map::HKTrafficLayer::GetAllObjectIds(Data::ArrayListInt64 *outArr, void **nameArr)
{
	UOSInt ret = 0;
	UOSInt i;
	UOSInt j;
	RoadInfo *road;
	const Data::ArrayList<RoadInfo*> *roadList;
	Sync::MutexUsage mutUsage(&this->roadMut);
	roadList = this->roadMap.GetValues();
	i = 0;
	j = roadList->GetCount();
	while (i < j)
	{
		road = roadList->GetItem(i);
		if (road->vec)
		{
			outArr->Add(road->objId);
			ret++;
		}
		i++;
	}
	mutUsage.EndUse();
	return ret;
}

UOSInt Map::HKTrafficLayer::GetObjectIds(Data::ArrayListInt64 *outArr, void **nameArr, Double mapRate, Math::RectArea<Int32> rect, Bool keepEmpty)
{
	return GetObjectIdsMapXY(outArr, nameArr, rect.ToDouble() / mapRate, keepEmpty);
}

UOSInt Map::HKTrafficLayer::GetObjectIdsMapXY(Data::ArrayListInt64 *outArr, void **nameArr, Math::RectAreaDbl rect, Bool keepEmpty)
{
	UOSInt retCnt = 0;
	RoadInfo *road;
	UOSInt i;
	UOSInt j;
	const Data::ArrayList<RoadInfo*> *roadList;
	rect = rect.Reorder();
	Sync::MutexUsage mutUsage(&this->roadMut);
	roadList = this->roadMap.GetValues();
	i = 0;
	j = roadList->GetCount();
	while (i < j)
	{
		road = roadList->GetItem(i);
		if (road->vec && road->minX <= rect.br.x && road->maxX >= rect.tl.x && road->minY <= rect.br.y && road->maxY >= rect.tl.y)
		{
			outArr->Add(road->objId);
			retCnt++;
		}
		i++;
	}
	mutUsage.EndUse();
	return retCnt;
}

Int64 Map::HKTrafficLayer::GetObjectIdMax()
{
	Int64 ret = 0;
	Sync::MutexUsage mutUsage(&this->roadMut);
	const Data::ArrayList<Int64> *keys = this->roadMap.GetKeys();
	ret = keys->GetItem(keys->GetCount() - 1);
	mutUsage.EndUse();
	return ret;
}

void Map::HKTrafficLayer::ReleaseNameArr(void *nameArr)
{
}

UTF8Char *Map::HKTrafficLayer::GetString(UTF8Char *buff, UOSInt buffSize, void *nameArr, Int64 id, UOSInt strIndex)
{
	////////////////////////////
	return 0;
}

UOSInt Map::HKTrafficLayer::GetColumnCnt()
{
	////////////////////////////
	return 0;
}

UTF8Char *Map::HKTrafficLayer::GetColumnName(UTF8Char *buff, UOSInt colIndex)
{
	////////////////////////////
	return 0;
}

DB::DBUtil::ColType Map::HKTrafficLayer::GetColumnType(UOSInt colIndex, UOSInt *colSize)
{
	////////////////////////////
	return DB::DBUtil::CT_Unknown;
}

Bool Map::HKTrafficLayer::GetColumnDef(UOSInt colIndex, DB::ColDef *colDef)
{
	////////////////////////////
	return false;
}

UInt32 Map::HKTrafficLayer::GetCodePage()
{
	return 65001;
}

Bool Map::HKTrafficLayer::GetBounds(Math::RectAreaDbl *bounds)
{
	*bounds = Math::RectAreaDbl(Math::Coord2DDbl(this->minX, this->minY), Math::Coord2DDbl(this->maxX, this->maxY));
	return this->minX != 0 || this->minY != 0 || this->maxX != 0 || this->maxY != 0;
}

void *Map::HKTrafficLayer::BeginGetObject()
{
	return (void*)-1;
}

void Map::HKTrafficLayer::EndGetObject(void *session)
{
}

Math::Geometry::Vector2D *Map::HKTrafficLayer::GetNewVectorById(void *session, Int64 id)
{
	RoadInfo *road;
	Math::Geometry::Vector2D *vec = 0;
	Sync::MutexUsage mutUsage(&this->roadMut);
	road = this->roadMap.Get(id);
	if (road && road->vec)
	{
		vec = road->vec->Clone();
		if (road->lev == Map::HKTrafficLayer::SL_GOOD)
		{
			((Math::Geometry::Polyline*)vec)->SetColor(0xff00ff00);
		}
		else if (road->lev == Map::HKTrafficLayer::SL_AVERAGE)
		{
			((Math::Geometry::Polyline*)vec)->SetColor(0xffffff00);
		}
		else if (road->lev == Map::HKTrafficLayer::SL_BAD)
		{
			((Math::Geometry::Polyline*)vec)->SetColor(0xffff0000);
		}
	}
	mutUsage.EndUse();
	return vec;
}

Map::IMapDrawLayer::ObjectClass Map::HKTrafficLayer::GetObjectClass()
{
	return Map::IMapDrawLayer::OC_HKTRAFFIC_LAYER;
}

Map::IMapDrawLayer *Map::HKTrafficLayer::GetNodePoints()
{
	Map::VectorLayer *layer;
	UTF8Char sbuff[32];
	const UTF8Char *sptr = sbuff;
	const UTF8Char *col = (const UTF8Char*)"id";
	Math::Geometry::Point *pt;
	NEW_CLASS(layer, Map::VectorLayer(Map::DRAW_LAYER_POINT, CSTR("HKTrafficNode"), 1, &col, Math::CoordinateSystemManager::CreateProjCoordinateSystemDefName(Math::CoordinateSystemManager::PCST_HK80), 0, CSTR("HKTrafficNode")));
	OSInt i = 0;
	OSInt j = sizeof(nodeTable) / sizeof(nodeTable[0]);
	while (i < j)
	{
		NEW_CLASS(pt, Math::Geometry::Point(2326, nodeTable[i].x, nodeTable[i].y));
		Text::StrInt32(sbuff, nodeTable[i].id);
		layer->AddVector(pt, &sptr);
		i++;
	}
	return layer;
}
