#include "Stdafx.h"
#include "IO/FileStream.h"
#include "IO/Path.h"
#include "Map/TileMapFolderWriter.h"
#include "Text/JSONBuilder.h"

Map::TileMapFolderWriter::TileMapFolderWriter(Text::CStringNN folderName, Map::TileMap::ImageType imgType, UOSInt minLev, UOSInt maxLev, Math::RectAreaDbl bounds)
{
	this->folderName = Text::String::New(folderName);
	this->imgType = imgType;
	this->minLev = minLev;
	this->maxLev = maxLev;
	this->bounds = bounds;
	UOSInt i;
	if (folderName.EndsWith(IO::Path::PATH_SEPERATOR))
	{
		i = Text::StrLastIndexOfCharC(folderName.v, folderName.leng - 1, IO::Path::PATH_SEPERATOR);
		this->name = Text::String::New(folderName.v + i + 1, folderName.leng - i - 1);
	}
	else
	{
		i = folderName.LastIndexOf(IO::Path::PATH_SEPERATOR);
		this->name = Text::String::New(folderName.Substring(i + 1));
	}
}

Map::TileMapFolderWriter::~TileMapFolderWriter()
{
	UTF8Char sbuff[512];
	UTF8Char *sptr;
	Text::JSONBuilder json(Text::JSONBuilder::OT_OBJECT);
	json.ObjectAddStr(CSTR("name"), this->name);
	json.ObjectAddStr(CSTR("version"), CSTR("1.0"));
	json.ObjectAddStr(CSTR("description"), CSTR(""));
	json.ObjectAddStr(CSTR("attribution"), CSTR("Generated by AVIRead (sswroom)"));
	json.ObjectAddStr(CSTR("type"), CSTR("overlay"));
	switch (this->imgType)
	{
	case Map::TileMap::IT_WEBP:
		json.ObjectAddStr(CSTR("format"), CSTR("webp"));
		break;
	case Map::TileMap::IT_JPG:
		json.ObjectAddStr(CSTR("format"), CSTR("jpg"));
		break;
	case Map::TileMap::IT_PNG:
		json.ObjectAddStr(CSTR("format"), CSTR("png"));
		break;
	}
	sptr = Text::StrUOSInt(sbuff, this->minLev);
	json.ObjectAddStr(CSTR("minzoom"), CSTRP(sbuff, sptr));
	sptr = Text::StrUOSInt(sbuff, this->maxLev);
	json.ObjectAddStr(CSTR("maxzoom"), CSTRP(sbuff, sptr));
	json.ObjectAddStr(CSTR("scale"), CSTR("1.000000"));
	json.ObjectBeginArray(CSTR("bounds"));
	json.ArrayAddFloat64(this->bounds.tl.x);
	json.ArrayAddFloat64(this->bounds.tl.y);
	json.ArrayAddFloat64(this->bounds.br.x);
	json.ArrayAddFloat64(this->bounds.br.y);
	json.ArrayEnd();
	json.ObjectAddStr(CSTR("profile"), CSTR("mercator"));
	Text::CStringNN metadata = json.Build();
	Data::Timestamp t = Data::Timestamp::UtcNow();
	sptr = this->folderName->ConcatTo(sbuff);
	if (sptr[-1] != IO::Path::PATH_SEPERATOR)
	{
		*sptr++ = IO::Path::PATH_SEPERATOR;
	}
	sptr = Text::StrConcatC(sptr, UTF8STRC("metadata.json"));
	IO::FileStream fs(CSTRP(sbuff, sptr), IO::FileMode::Create, IO::FileShare::DenyNone, IO::FileStream::BufferType::Normal);
	fs.WriteCont(metadata.v, metadata.leng);

	this->name->Release();
}

void Map::TileMapFolderWriter::BeginLevel(UOSInt level)
{
}

void Map::TileMapFolderWriter::AddX(Int32 x)
{
}

void Map::TileMapFolderWriter::AddImage(UOSInt level, Int32 x, Int32 y, Data::ByteArrayR imgData, Map::TileMap::ImageType imgType)
{
	UTF8Char sbuff[512];
	UTF8Char *sptr;
	sptr = this->folderName->ConcatTo(sbuff);
	if (sptr[-1] != IO::Path::PATH_SEPERATOR)
	{
		*sptr++ = IO::Path::PATH_SEPERATOR;
	}
	sptr = Text::StrUOSInt(sptr, level);
	*sptr++ = IO::Path::PATH_SEPERATOR;
	sptr = Text::StrInt32(sptr, x);
	IO::Path::CreateDirectory(CSTRP(sbuff, sptr));
	*sptr++ = IO::Path::PATH_SEPERATOR;
	sptr = Text::StrInt32(sptr, y);
	switch (imgType)
	{
	default:
	case Map::TileMap::IT_PNG:
		sptr = Text::StrConcatC(sptr, UTF8STRC(".png"));
		break;
	case Map::TileMap::IT_WEBP:
		sptr = Text::StrConcatC(sptr, UTF8STRC(".webp"));
		break;
	case Map::TileMap::IT_JPG:
		sptr = Text::StrConcatC(sptr, UTF8STRC(".jpg"));
		break;
	}
	IO::FileStream fs(CSTRP(sbuff, sptr), IO::FileMode::Create, IO::FileShare::DenyNone, IO::FileStream::BufferType::NoWriteBuffer);
	fs.Write(imgData.Ptr(), imgData.GetSize());
}
